4月23日 20:58:43 开始重构

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:44 包替换:
"os"

4月23日 20:58:45 重构完毕

4月24日 2:6:53 开始提取注释

4月24日 2:6:53 新增注释:
// Portable analogs of some common system call errors.
//
// Errors returned from this package may be tested against these errors
// with errors.Is.

4月24日 2:6:53 新增注释:
	// ErrInvalid indicates an invalid argument.
	// Methods on File will return this error when the receiver is nil.

4月24日 2:6:53 新增注释:
	//ErrNoDeadline       = errNoDeadline()       // "file type does not support deadline"
	//ErrDeadlineExceeded = errDeadlineExceeded() // "i/o timeout"

4月24日 2:6:53 新增注释:
// testingForceReadDirLstat forces ReadDir to call Lstat, for testing that code path.
// This can be difficult to provoke on some Unix systems otherwise.

4月24日 2:6:53 新增注释:
// checkWrapErr is the test hook to enable checking unexpected wrapped errors of poll.ErrFileClosing.
// It is set to true in the export_test.go for tests (including fuzz tests).

4月24日 2:6:53 新增注释:
// Export for testing.
// This is set via go:linkname on runtime.canUseLongPaths, and is true when the OS
// supports opting into proper long path handling without the need for fixups.

4月24日 2:6:53 新增注释:
// allowReadDirFileID indicates whether File.readdir should try to use FILE_ID_BOTH_DIR_INFO
// if the underlying file system supports it.
// Useful for testing purposes.

4月24日 2:6:53 新增注释:
//FixLongPath        = fixLongPath

4月24日 2:6:53 新增注释:
//CommandLineToArgv  = commandLineToArgv

4月24日 2:6:53 新增注释:
// Stdin, Stdout, and Stderr are open Files pointing to the standard input,
// standard output, and standard error file descriptors.
//
// Note that the Go runtime writes to standard error for panics and crashes;
// closing Stderr may cause those messages to go elsewhere, perhaps
// to a file opened later.

4月24日 2:6:53 新增注释:
// Flags to OpenFile wrapping those of the underlying system. Not all
// flags may be implemented on a given system.

4月24日 2:6:53 新增注释:
// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.

4月24日 2:6:53 新增注释:
// open the file read-only.

4月24日 2:6:53 新增注释:
// open the file write-only.

4月24日 2:6:53 新增注释:
// open the file read-write.

4月24日 2:6:53 新增注释:
// The remaining values may be or'ed in to control behavior.

4月24日 2:6:53 新增注释:
// append data to the file when writing.

4月24日 2:6:53 新增注释:
// create a new file if none exists.

4月24日 2:6:53 新增注释:
// used with O_CREATE, file must not exist.

4月24日 2:6:53 新增注释:
// open for synchronous I/O.

4月24日 2:6:53 新增注释:
// truncate regular writable file when opened.

4月24日 2:6:53 新增注释:
// Seek whence values.
//
// Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.

4月24日 2:6:53 新增注释:
// seek relative to the origin of the file

4月24日 2:6:53 新增注释:
// seek relative to the current offset

4月24日 2:6:53 新增注释:
// seek relative to the end

4月24日 2:6:53 新增注释:
//func testStartProcess(dir, cmd string, args []string, expect string) func(t *testing.T) {
//	return func(t *testing.T) {
//		t.Parallel()
//
//		r, w, err := Pipe()
//		if err != nil {
//			t.Fatalf("Pipe: %v", err)
//		}
//		defer r.Close()
//
//		attr := &ProcAttr{Dir: dir, Files: []*File{nil, w, Stderr}}
//		p, err := StartProcess(cmd, args, attr)
//		if err != nil {
//			t.Fatalf("StartProcess: %v", err)
//		}
//		w.Close()
//
//		var b strings.Builder
//		io.Copy(&b, r)
//		output := b.String()
//
//		fi1, _ := Stat(strings.TrimSpace(output))
//		fi2, _ := Stat(expect)
//		if !SameFile(fi1, fi2) {
//			t.Errorf("exec %q returned %q wanted %q",
//				strings.Join(append([]string{cmd}, args...), " "), output, expect)
//		}
//		p.Wait()
//	}
//}

4月24日 2:6:53 新增注释:
//func TestStartProcess(t *testing.T) {
//	testenv.MustHaveExec(t)
//	t.Parallel()
//
//	var dir, cmd string
//	var args []string
//	switch runtime.GOOS {
//	case "android":
//		t.Skip("android doesn't have /bin/pwd")
//	case "windows":
//		cmd = Getenv("COMSPEC")
//		dir = Getenv("SystemRoot")
//		args = []string{"/c", "cd"}
//	default:
//		var err error
//		cmd, err = exec.LookPath("pwd")
//		if err != nil {
//			t.Fatalf("Can't find pwd: %v", err)
//		}
//		dir = "/"
//		args = []string{}
//		t.Logf("Testing with %v", cmd)
//	}
//	cmddir, cmdbase := filepath.Split(cmd)
//	args = append([]string{cmdbase}, args...)
//	t.Run("absolute", testStartProcess(dir, cmd, args, dir))
//	t.Run("relative", testStartProcess(cmddir, cmdbase, args, cmddir))
//}

4月24日 2:6:54 新增注释:
//
//func TestRandomLen(t *testing.T) {
//	for range 5 {
//		dir, err := MkdirTemp(t.TempDir(), "*")
//		if err != nil {
//			t.Fatal(err)
//		}
//		base := filepath.Base(dir)
//		if len(base) > 10 {
//			t.Errorf("MkdirTemp returned len %d: %s", len(base), base)
//		}
//	}
//	for range 5 {
//		f, err := CreateTemp(t.TempDir(), "*")
//		if err != nil {
//			t.Fatal(err)
//		}
//		base := filepath.Base(f.Name())
//		f.Close()
//		if len(base) > 10 {
//			t.Errorf("CreateTemp returned len %d: %s", len(base), base)
//		}
//	}
//}

4月24日 2:6:54 新增注释:
// OS-specific path separator

4月24日 2:6:54 新增注释:
// OS-specific path list separator

4月24日 2:6:54 新增注释:
// Args hold the command-line arguments, starting with the program name.

4月24日 2:6:54 新增注释:
// The defined file mode bits are the most significant bits of the FileMode.
// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.
// The values of these bits should be considered part of the public API and
// may be used in wire protocols or disk representations: they must not be
// changed, although new bits might be added.

4月24日 2:6:54 新增注释:
	// The single letters are the abbreviations
	// used by the String method's formatting.

4月24日 2:6:54 新增注释:
// T: temporary file; Plan 9 only

4月24日 2:6:54 新增注释:
// c: Unix character device, when ModeDevice is set

4月24日 2:6:54 新增注释:
// ?: non-regular file; nothing else is known about this file

4月24日 2:6:54 新增注释:
// Mask for the type bits. For regular files, none will be set.

4月24日 2:6:54 新增注释:
// Unix permission bits, 0o777

4月24日 2:6:54 新增注释:
// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Package cfg holds configuration shared by the Go command and internal/testenv.
// Definitions that don't need to be exposed outside of cmd/go should be in
// cmd/go/internal/cfg instead of this package.

4月24日 2:6:54 新增注释:
// KnownEnv is a list of environment variables that affect the operation
// of the Go command.

4月24日 2:6:54 新增注释:
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// An OSArch is a pair of GOOS and GOARCH values indicating a platform.

4月24日 2:6:54 新增注释:
// RaceDetectorSupported reports whether goos/goarch supports the race
// detector. There is a copy of this function in cmd/dist/test.go.
// Race detector only supports 48-bit VMA on arm64. But it will always
// return true for arm64, because we don't have VMA size information during
// the compile time.

4月24日 2:6:54 新增注释:
// MSanSupported reports whether goos/goarch supports the memory
// sanitizer option.

4月24日 2:6:54 新增注释:
// ASanSupported reports whether goos/goarch supports the address
// sanitizer option.

4月24日 2:6:54 新增注释:
// FuzzSupported reports whether goos/goarch supports fuzzing
// ('go test -fuzz=.').

4月24日 2:6:54 新增注释:
// FuzzInstrumented reports whether fuzzing on goos/goarch uses coverage
// instrumentation. (FuzzInstrumented implies FuzzSupported.)

4月24日 2:6:54 新增注释:
// TODO(#14565): support more architectures.

4月24日 2:6:54 新增注释:
// MustLinkExternal reports whether goos/goarch requires external linking
// with or without cgo dependencies.

4月24日 2:6:54 新增注释:
			// Internally linking cgo is incomplete on some architectures.
			// https://go.dev/issue/14449

4月24日 2:6:54 新增注释:
// windows/arm64 internal linking is not implemented.

4月24日 2:6:54 新增注释:
			// Big Endian PPC64 cgo internal linking is not implemented for aix or linux.
			// https://go.dev/issue/8912

4月24日 2:6:54 新增注释:
			// It seems that on Dragonfly thread local storage is
			// set up by the dynamic linker, so internal cgo linking
			// doesn't work. Test case is "go test runtime/cgo".

4月24日 2:6:54 新增注释:
// BuildModeSupported reports whether goos/goarch supports the given build mode
// using the given compiler.
// There is a copy of this function in cmd/dist/test.go.

4月24日 2:6:54 新增注释:
				// linux/ppc64 not supported because it does
				// not support external linking mode yet.

4月24日 2:6:54 新增注释:
				// Other targets do not support -shared,
				// per ParseFlags in
				// cmd/compile/internal/base/flag.go.
				// For c-archive the Go tool passes -shared,
				// so that the result is suitable for inclusion
				// in a PIE or shared library.

4月24日 2:6:54 新增注释:
// DefaultPIE reports whether goos/goarch produces a PIE binary when using the
// "default" buildmode. On Windows this is affected by -race,
// so force the caller to pass that in to centralize that choice.

4月24日 2:6:54 新增注释:
			// PIE is not supported with -race on windows;
			// see https://go.dev/cl/416174.

4月24日 2:6:54 新增注释:
// ExecutableHasDWARF reports whether the linked executable includes DWARF
// symbols on goos/goarch.

4月24日 2:6:54 新增注释:
// osArchInfo describes information about an OSArch extracted from cmd/dist and
// stored in the generated distInfo map.

4月24日 2:6:54 新增注释:
// CgoSupported reports whether goos/goarch supports cgo.

4月24日 2:6:54 新增注释:
// Broken reportsr whether goos/goarch is considered a broken port.
// (See https://go.dev/wiki/PortingPolicy#broken-ports.)

4月24日 2:6:54 新增注释:
// Code generated by go test internal/platform -fix. DO NOT EDIT.

4月24日 2:6:54 新增注释:
// To change the information in this file, edit the cgoEnabled and/or firstClass
// maps in cmd/dist/build.go, then run 'go generate internal/platform'.

4月24日 2:6:54 新增注释:
// List is the list of all valid GOOS/GOARCH combinations,
// including known-broken ports.

4月24日 2:6:54 新增注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// A pointer to the base address of the region of pages.

4月24日 2:6:54 新增注释:
	// A pointer to the base address of a range of pages allocated by the VirtualAlloc function.
	// The page pointed to by the BaseAddress member is contained within this allocation range.

4月24日 2:6:54 新增注释:
// The memory protection option when the region was initially allocated

4月24日 2:6:54 新增注释:
// The size of the region beginning at the base address in which all pages have identical attributes, in bytes.

4月24日 2:6:54 新增注释:
// The state of the pages in the region.

4月24日 2:6:54 新增注释:
// The access protection of the pages in the region.

4月24日 2:6:54 新增注释:
// The type of pages in the region.

4月24日 2:6:54 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// These structures are described
// in https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca069dad-ed16-42aa-b057-b6b207f447cc
// and https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/b41f1cbf-10df-4a47-98d4-1c52a833d913.

4月24日 2:6:54 新增注释:
// REPARSE_DATA_BUFFER_HEADER is a common part of REPARSE_DATA_BUFFER structure.

4月24日 2:6:54 新增注释:
	// The size, in bytes, of the reparse data that follows
	// the common portion of the REPARSE_DATA_BUFFER element.
	// This value is the length of the data starting at the
	// SubstituteNameOffset field.

4月24日 2:6:54 新增注释:
	// The integer that contains the offset, in bytes,
	// of the substitute name string in the PathBuffer array,
	// computed as an offset from byte 0 of PathBuffer. Note that
	// this offset must be divided by 2 to get the array index.

4月24日 2:6:54 新增注释:
	// The integer that contains the length, in bytes, of the
	// substitute name string. If this string is null-terminated,
	// SubstituteNameLength does not include the Unicode null character.

4月24日 2:6:54 新增注释:
// PrintNameOffset is similar to SubstituteNameOffset.

4月24日 2:6:54 新增注释:
// PrintNameLength is similar to SubstituteNameLength.

4月24日 2:6:54 新增注释:
	// Flags specifies whether the substitute name is a full path name or
	// a path name relative to the directory containing the symbolic link.

4月24日 2:6:54 新增注释:
// Path returns path stored in rb.

4月24日 2:6:54 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// AdjustTokenPrivileges call failed

4月24日 2:6:54 新增注释:
// AdjustTokenPrivileges call succeeded

4月24日 2:6:54 新增注释:
// GetLastError returned ERROR_SUCCESS

4月24日 2:6:54 新增注释:
// Implemented in runtime package.

4月24日 2:6:54 新增注释:
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// symlink support for CreateSymbolicLink() starting with Windows 10 (1703, v10.0.14972)

4月24日 2:6:54 新增注释:
// FileInformationClass values

4月24日 2:6:54 新增注释:
// FILE_ATTRIBUTE_TAG_INFO

4月24日 2:6:54 新增注释:
// FILE_REMOTE_PROTOCOL_INFO

4月24日 2:6:54 新增注释:
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// UTF16PtrToString is like UTF16ToString, but takes *uint16
// as a parameter instead of []uint16.

4月24日 2:6:54 新增注释:
// flags for CreateToolhelp32Snapshot

4月24日 2:6:54 新增注释:
// Constants from lmshare.h

4月24日 2:6:54 新增注释:
// Code generated by 'go generate'; DO NOT EDIT.

4月24日 2:6:54 新增注释:
// Do the interface allocations only once for common
// Errno values.

4月24日 2:6:54 新增注释:
// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.

4月24日 2:6:54 新增注释:
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Package registry provides access to the Windows registry.
//
// Here is a simple example, opening a registry key and reading a string value from it.
//
//	k, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer k.Close()
//
//	s, _, err := k.GetStringValue("SystemRoot")
//	if err != nil {
//		log.Fatal(err)
//	}
//	fmt.Printf("Windows system root is %q\n", s)
//
// NOTE: This package is a copy of golang.org/x/sys/windows/registry
// with KeyInfo.ModTime removed to prevent dependency cycles.

4月24日 2:6:54 新增注释:
	// Registry key security and access rights.
	// See https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights
	// for details.

4月24日 2:6:54 新增注释:
// Key is a handle to an open Windows registry key.
// Keys can be obtained by calling OpenKey; there are
// also some predefined root keys such as CURRENT_USER.
// Keys can be used directly in the Windows API.

4月24日 2:6:54 新增注释:
	// Windows defines some predefined root keys that are always open.
	// An application can use these keys as entry points to the registry.
	// Normally these keys are used in OpenKey to open new keys,
	// but they can also be used anywhere a Key is required.

4月24日 2:6:54 新增注释:
// Close closes open key k.

4月24日 2:6:54 新增注释:
// OpenKey opens a new key with path name relative to key k.
// It accepts any open key, including CURRENT_USER and others,
// and returns the new key and an error.
// The access parameter specifies desired access rights to the
// key to be opened.

4月24日 2:6:54 新增注释:
// ReadSubKeyNames returns the names of subkeys of key k.

4月24日 2:6:54 新增注释:
	// RegEnumKeyEx must be called repeatedly and to completion.
	// During this time, this goroutine cannot migrate away from
	// its current thread. See #49320.

4月24日 2:6:54 新增注释:
	// Registry key size limit is 255 bytes and described there:
	// https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-element-size-limits

4月24日 2:6:54 新增注释:
//plus extra room for terminating zero byte

4月24日 2:6:54 新增注释:
// Double buffer size and try again.

4月24日 2:6:54 新增注释:
// CreateKey creates a key named path under open key k.
// CreateKey returns the new key and a boolean flag that reports
// whether the key already existed.
// The access parameter specifies the access rights for the key
// to be created.

4月24日 2:6:54 新增注释:
// DeleteKey deletes the subkey path of key k and its values.

4月24日 2:6:54 新增注释:
// A KeyInfo describes the statistics of a key. It is returned by Stat.

4月24日 2:6:54 新增注释:
// Stat retrieves information about the open key k.

4月24日 2:6:54 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Every PC has "stdole 2.0 OLE Automation" library installed.

4月24日 2:6:54 新增注释:
// read data with no buffer

4月24日 2:6:54 新增注释:
// read data with short buffer

4月24日 2:6:54 新增注释:
// check GetValue returns ErrNotExist as required

4月24日 2:6:54 新增注释:
				// Size of utf16 string in bytes is not perfect,
				// but correct for current test values.
				// Size also includes terminating 0.

4月24日 2:6:54 新增注释:
// count bytes, not uint16

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// ErrShortBuffer is returned when the buffer was too short for the operation.

4月24日 2:6:54 新增注释:
// ErrNotExist is returned when a registry key or value does not exist.

4月24日 2:6:54 新增注释:
// ErrUnexpectedType is returned by Get*Value when the value's type was unexpected.

4月24日 2:6:54 新增注释:
// GetValue retrieves the type and data for the specified value associated
// with an open key k. It fills up buffer buf and returns the retrieved
// byte count n. If buf is too small to fit the stored value it returns
// ErrShortBuffer error along with the required buffer size n.
// If no buffer is provided, it returns true and actual buffer size n.
// If no buffer is provided, GetValue returns the value's type only.
// If the value does not exist, the error returned is ErrNotExist.
//
// GetValue is a low level function. If value's type is known, use the appropriate
// Get*Value function instead.

4月24日 2:6:54 新增注释:
// GetStringValue retrieves the string value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetStringValue returns ErrNotExist.
// If value is not SZ or EXPAND_SZ, it will return the correct value
// type and ErrUnexpectedType.

4月24日 2:6:54 新增注释:
// GetMUIStringValue retrieves the localized string value for
// the specified value name associated with an open key k.
// If the value name doesn't exist or the localized string value
// can't be resolved, GetMUIStringValue returns ErrNotExist.

4月24日 2:6:54 新增注释:
		// Try to resolve the string value using the system directory as
		// a DLL search path; this assumes the string value is of the form
		// @[path]\dllname,-strID but with no path given, e.g. @tzres.dll,-320.

4月24日 2:6:54 新增注释:
		// This approach works with tzres.dll but may have to be revised
		// in the future to allow callers to provide custom search paths.

4月24日 2:6:54 新增注释:
// Buffer not growing, assume race; break

4月24日 2:6:54 新增注释:
// ExpandString expands environment-variable strings and replaces
// them with the values defined for the current user.
// Use ExpandString to expand EXPAND_SZ strings.

4月24日 2:6:54 新增注释:
// GetStringsValue retrieves the []string value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetStringsValue returns ErrNotExist.
// If value is not MULTI_SZ, it will return the correct value
// type and ErrUnexpectedType.

4月24日 2:6:54 新增注释:
// remove terminating null

4月24日 2:6:54 新增注释:
// GetIntegerValue retrieves the integer value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetIntegerValue returns ErrNotExist.
// If value is not DWORD or QWORD, it will return the correct value
// type and ErrUnexpectedType.

4月24日 2:6:54 新增注释:
// GetBinaryValue retrieves the binary value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetBinaryValue returns ErrNotExist.
// If value is not BINARY, it will return the correct value
// type and ErrUnexpectedType.

4月24日 2:6:54 新增注释:
// SetDWordValue sets the data and type of a name value
// under key k to value and DWORD.

4月24日 2:6:54 新增注释:
// SetQWordValue sets the data and type of a name value
// under key k to value and QWORD.

4月24日 2:6:54 新增注释:
// SetStringValue sets the data and type of a name value
// under key k to value and SZ. The value must not contain a zero byte.

4月24日 2:6:54 新增注释:
// SetExpandStringValue sets the data and type of a name value
// under key k to value and EXPAND_SZ. The value must not contain a zero byte.

4月24日 2:6:54 新增注释:
// SetStringsValue sets the data and type of a name value
// under key k to value and MULTI_SZ. The value strings
// must not contain a zero byte.

4月24日 2:6:54 新增注释:
// SetBinaryValue sets the data and type of a name value
// under key k to value and BINARY.

4月24日 2:6:54 新增注释:
// DeleteValue removes a named value from the key k.

4月24日 2:6:54 新增注释:
// ReadValueNames returns the value names of key k.

4月24日 2:6:54 新增注释:
// extra room for terminating null character

4月24日 2:6:54 新增注释:
// Double buffer size and try again.

4月24日 2:6:54 新增注释:
// Code generated by 'go generate'; DO NOT EDIT.

4月24日 2:6:54 新增注释:
// Do the interface allocations only once for common
// Errno values.

4月24日 2:6:54 新增注释:
// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.

4月24日 2:6:54 新增注释:
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)

4月24日 2:6:54 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Package sysdll is an internal leaf package that records and reports
// which Windows DLL names are used by Go itself. These DLLs are then
// only loaded from the System32 directory. See Issue 14959.

4月24日 2:6:54 新增注释:
// IsSystemDLL reports whether the named dll key (a base name, like
// "foo.dll") is a system DLL which should only be loaded from the
// Windows SYSTEM32 directory.
//
// Filenames are case sensitive, but that doesn't matter because
// the case registered with Add is also the same case used with
// LoadDLL later.
//
// It has no associated mutex and should only be mutated serially
// (currently: during init), and not concurrent with DLL loading.

4月24日 2:6:54 新增注释:
// Add notes that dll is a system32 DLL which should only be loaded
// from the Windows SYSTEM32 directory. It returns its argument back,
// for ease of use in generated code.

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// MustHaveExec checks that the current system can start new processes
// using os.StartProcess or (more commonly) exec.Command.
// If not, MustHaveExec calls t.Skip with an explanation.
//
// On some platforms MustHaveExec checks for exec support by re-executing the
// current executable, which must be a binary built by 'go test'.
// We intentionally do not provide a HasExec function because of the risk of
// inappropriate recursion in TestMain functions.
//
// To check for exec support outside of a test, just try to exec the command.
// If exec is not supported, testenv.SyscallIsNotSupported will return true
// for the resulting error.

4月24日 2:6:54 新增注释:
// Assume that exec always works on non-mobile platforms and Android.

4月24日 2:6:54 新增注释:
	// ios has an exec syscall but on real iOS devices it might return a
	// permission error. In an emulated environment (such as a Corellium host)
	// it might succeed, so if we need to exec we'll just have to try it and
	// find out.
	//
	// As of 2023-04-19 wasip1 and js don't have exec syscalls at all, but we
	// may as well use the same path so that this branch can be tested without
	// an ios environment.

4月24日 2:6:54 新增注释:
		// This isn't a standard 'go test' binary, so we don't know how to
		// self-exec in a way that should succeed without side effects.
		// Just forget it.

4月24日 2:6:54 新增注释:
	// We know that this is a test executable. We should be able to run it with a
	// no-op flag to check for overall exec support.

4月24日 2:6:54 新增注释:
// MustHaveExecPath checks that the current system can start the named executable
// using os.StartProcess or (more commonly) exec.Command.
// If not, MustHaveExecPath calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// CleanCmdEnv will fill cmd.Env with the environment, excluding certain
// variables that could modify the behavior of the Go tools such as
// GODEBUG and GOTRACEBACK.
//
// If the caller wants to set cmd.Dir, set it before calling this function,
// so PWD will be set correctly in the environment.

4月24日 2:6:54 新增注释:
		// Exclude GODEBUG from the environment to prevent its output
		// from breaking tests that are trying to parse other command output.

4月24日 2:6:54 新增注释:
// Exclude GOTRACEBACK for the same reason.

4月24日 2:6:54 新增注释:
// CommandContext is like exec.CommandContext, but:
//   - skips t if the platform does not support os/exec,
//   - sends SIGQUIT (if supported by the platform) instead of SIGKILL
//     in its Cancel function
//   - if the test has a deadline, adds a Context timeout and WaitDelay
//     for an arbitrary grace period before the test's deadline expires,
//   - fails the test if the command does not complete before the test's deadline, and
//   - sets a Cleanup function that verifies that the test did not leak a subprocess.

4月24日 2:6:54 新增注释:
// unlimited unless the test has a deadline (to allow for interactive debugging)

4月24日 2:6:54 新增注释:
			// Start with a minimum grace period, just long enough to consume the
			// output of a reasonable program after it terminates.

4月24日 2:6:54 新增注释:
			// If time allows, increase the termination grace period to 5% of the
			// test's remaining time.

4月24日 2:6:54 新增注释:
			// When we run commands that execute subprocesses, we want to reserve two
			// grace periods to clean up: one for the delay between the first
			// termination signal being sent (via the Cancel callback when the Context
			// expires) and the process being forcibly terminated (via the WaitDelay
			// field), and a second one for the delay between the process being
			// terminated and the test logging its output for debugging.
			//
			// (We want to ensure that the test process itself has enough time to
			// log the output before it is also terminated.)

4月24日 2:6:54 新增注释:
				// Either ctx doesn't have a deadline, or its deadline would expire
				// after (or too close before) the test has already timed out.
				// Add a shorter timeout so that the test will produce useful output.

4月24日 2:6:54 新增注释:
			// The command is being terminated due to ctx being canceled, but
			// apparently not due to an explicit test deadline that we added.
			// Log that information in case it is useful for diagnosing a failure,
			// but don't actually fail the test because of it.

4月24日 2:6:54 新增注释:
// Command is like exec.Command, but applies the same changes as
// testenv.CommandContext (with a default Context).

4月24日 2:6:54 新增注释:
// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// OptimizationOff reports whether optimization is disabled.

4月24日 2:6:54 新增注释:
// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// OptimizationOff reports whether optimization is disabled.

4月24日 2:6:54 新增注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:54 新增注释:
// Package testenv provides information about what functionality
// is available in different testing environments run by the Go team.
//
// It is an internal package because these details are specific
// to the Go team's test setup (on build.golang.org) and not
// fundamental to tests in general.

4月24日 2:6:54 新增注释:
// Save the original environment during init for use in checks. A test
// binary may modify its environment before calling HasExec to change its
// behavior (such as mimicking a command-line tool), and that modified
// environment might cause environment checks to behave erratically.

4月24日 2:6:54 新增注释:
// Builder reports the name of the builder running this test
// (for example, "linux-amd64" or "windows-386-gce").
// If the test is not running on the build infrastructure,
// Builder returns the empty string.

4月24日 2:6:54 新增注释:
		// It's too much work to require every caller of the go command
		// to pass along "-gcflags="+os.Getenv("GO_GCFLAGS").
		// For now, if $GO_GCFLAGS is set, report that we simply can't
		// run go build.

4月24日 2:6:54 新增注释:
		// To run 'go build', we need to be able to exec a 'go' command.
		// We somewhat arbitrarily choose to exec 'go tool -n compile' because that
		// also confirms that cmd/go can find the compiler. (Before CL 472096,
		// we sometimes ended up with cmd/go installed in the test environment
		// without a cmd/compile it could use to actually build things.)

4月24日 2:6:54 新增注释:
			// We can assume that we always have a complete Go toolchain available.
			// However, this platform requires a C linker to build even pure Go
			// programs, including tests. Do we have one in the test environment?
			// (On Android, for example, the device running the test might not have a
			// C toolchain installed.)
			//
			// If CC is set explicitly, assume that we do. Otherwise, use 'go env CC'
			// to determine which toolchain it would use by default.

4月24日 2:6:54 新增注释:
// For now, having go run and having go build are the same.

4月24日 2:6:54 新增注释:
// HasParallelism reports whether the current system can execute multiple
// threads in parallel.
// There is a copy of this function in cmd/dist/test.go.

4月24日 2:6:54 新增注释:
// MustHaveParallelism checks that the current system can execute multiple
// threads in parallel. If not, MustHaveParallelism calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// GoToolPath reports the path to the Go tool.
// It is a convenience wrapper around GoTool.
// If the tool is unavailable GoToolPath calls t.Skip.
// If the tool should be available and isn't, GoToolPath calls t.Fatal.

4月24日 2:6:54 新增注释:
	// Add all environment variables that affect the Go command to test metadata.
	// Cached test results will be invalidate when these variables change.
	// See golang.org/issue/32285.

4月24日 2:6:54 新增注释:
			// If runtime.GOROOT() is non-empty, assume that it is valid.
			//
			// (It might not be: for example, the user may have explicitly set GOROOT
			// to the wrong directory, or explicitly set GOROOT_FINAL but not GOROOT
			// and hasn't moved the tree to GOROOT_FINAL yet. But those cases are
			// rare, and if that happens the user can fix what they broke.)

4月24日 2:6:54 新增注释:
		// runtime.GOROOT doesn't know where GOROOT is (perhaps because the test
		// binary was built with -trimpath, or perhaps because GOROOT_FINAL was set
		// without GOROOT and the tree hasn't been moved there yet).
		//
		// Since this is internal/testenv, we can cheat and assume that the caller
		// is a test of some package in a subdirectory of GOROOT/src. ('go test'
		// runs the test in the directory containing the packaged under test.) That
		// means that if we start walking up the tree, we should eventually find
		// GOROOT/src/go.mod, and we can report the parent directory of that.
		//
		// Notably, this works even if we can't run 'go env GOROOT' as a
		// subprocess.

4月24日 2:6:54 新增注释:
// dir is either "." or only a volume name.

4月24日 2:6:54 新增注释:
// Found "module std", which is the module declaration in GOROOT/src!

4月24日 2:6:54 新增注释:
// GOROOT reports the path to the directory containing the root of the Go
// project source tree. This is normally equivalent to runtime.GOROOT, but
// works even if the test binary was built with -trimpath and cannot exec
// 'go env GOROOT'.
//
// If GOROOT cannot be found, GOROOT skips t if t is non-nil,
// or panics otherwise.

4月24日 2:6:54 新增注释:
// GoTool reports the path to the Go tool.

4月24日 2:6:54 新增注释:
// HasSrc reports whether the entire source tree is available under GOROOT.

4月24日 2:6:54 新增注释:
// HasExternalNetwork reports whether the current system can use
// external (non-localhost) networks.

4月24日 2:6:54 新增注释:
// MustHaveExternalNetwork checks that the current system can use
// external (non-localhost) networks.
// If not, MustHaveExternalNetwork calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// HasCGO reports whether the current system can use cgo.

4月24日 2:6:54 新增注释:
// MustHaveCGO calls t.Skip if cgo is not available.

4月24日 2:6:54 新增注释:
// CanInternalLink reports whether the current system can link programs with
// internal linking.

4月24日 2:6:54 新增注释:
// MustInternalLink checks that the current system can link programs with internal
// linking.
// If not, MustInternalLink calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// MustHaveBuildMode reports whether the current system can build programs in
// the given build mode.
// If not, MustHaveBuildMode calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// HasSymlink reports whether the current system can use os.Symlink.

4月24日 2:6:54 新增注释:
// MustHaveSymlink reports whether the current system can use os.Symlink.
// If not, MustHaveSymlink calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// HasLink reports whether the current system can use os.Link.

4月24日 2:6:54 新增注释:
	// From Android release M (Marshmallow), hard linking files is blocked
	// and an attempt to call link() on a file will return EACCES.
	// - https://code.google.com/p/android-developer-preview/issues/detail?id=3150

4月24日 2:6:54 新增注释:
// MustHaveLink reports whether the current system can use os.Link.
// If not, MustHaveLink calls t.Skip with an explanation.

4月24日 2:6:54 新增注释:
// CPUIsSlow reports whether the CPU running the test is suspected to be slow.

4月24日 2:6:54 新增注释:
// SkipIfShortAndSlow skips t if -short is set and the CPU running the test is
// suspected to be slow.
//
// (This is useful for CPU-intensive tests that otherwise complete quickly.)

4月24日 2:6:54 新增注释:
// SkipIfOptimizationOff skips t if optimization is disabled.

4月24日 2:6:54 新增注释:
// WriteImportcfg writes an importcfg file used by the compiler or linker to
// dstPath containing entries for the file mappings in packageFiles, as well
// as for the packages transitively imported by the package(s) in pkgs.
//
// pkgs may include any package pattern that is valid to pass to 'go list',
// so it may also be a list of Go source files all in the same directory.

4月24日 2:6:55 新增注释:
// Use 'go list' to resolve any missing packages and rewrite the import map.

4月24日 2:6:55 新增注释:
// SyscallIsNotSupported reports whether err may indicate that a system call is
// not supported by the current platform or execution environment.

4月24日 2:6:55 新增注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:55 新增注释:
// Sigquit is the signal to send to kill a hanging subprocess.
// On Unix we send SIGQUIT, but on non-Unix we only have os.Kill.

4月24日 2:6:55 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:55 新增注释:
		// For wasip1, some runtimes forbid absolute symlinks,
		// or symlinks that escape the current working directory.
		// Perform a simple test to see whether the runtime
		// supports symlinks or not. If we get a permission
		// error, the runtime does not support symlinks.

4月24日 2:6:55 新增注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:55 新增注释:
// Sigquit is the signal to send to kill a hanging subprocess.
// Send SIGQUIT to get a stack trace.

4月24日 2:6:55 新增注释:
			// User lacks permission: either the call requires root permission and the
			// user is not root, or the call is denied by a container security policy.

4月24日 2:6:55 新增注释:
			// Some containers return EINVAL instead of EPERM if a system call is
			// denied by security policy.

4月24日 2:6:55 新增注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 2:6:55 提取注释完毕

4月24日 2:6:56 开始翻译

4月24日 2:6:59 翻译注释:
// 可移植版本的某些常见系统调用错误。
//
// 从本包返回的错误可通过使用 errors.Is 与下列错误进行比较检测。

4月24日 2:7:0 翻译注释:
// ErrInvalid 表示一个无效的参数。
// 当接收者为nil时，File类型的方法将返回此错误。

4月24日 2:7:2 翻译注释:
// ErrNoDeadline       = errNoDeadline()       // "文件类型不支持超时截止"
// ErrDeadlineExceeded = errDeadlineExceeded() // "I/O超时"

4月24日 2:7:4 翻译注释:
// testingForceReadDirLstat 强制 ReadDir 调用 Lstat，用于测试该代码路径。在某些 Unix 系统上，这可能很难触发。

4月24日 2:7:6 翻译注释:
// checkWrapErr 是用于检测 poll.ErrFileClosing 不期望的包装错误的测试钩子。
// 在 export_test.go 中将其设置为 true，以供测试（包括模糊测试）使用。

4月24日 2:7:8 翻译注释:
// 用于测试导出。
// 此值通过go:linkname与runtime.canUseLongPaths关联设置，并在操作系统支持选择正确处理长路径而无需修复时为真。

4月24日 2:7:9 翻译注释:
// allowReadDirFileID 表示如果底层文件系统支持，File.readdir 是否应该尝试使用 FILE_ID_BOTH_DIR_INFO。
// 适用于测试目的。

4月24日 2:7:10 翻译注释:
// FixLongPath：修复长路径

4月24日 2:7:11 翻译注释:
// CommandLineToArgv 等于 commandLineToArgv

4月24日 2:7:14 翻译注释:
// Stdin, Stdout 和 Stderr 是指向标准输入、标准输出和标准错误文件描述符的已打开的 File 对象。
//
// 请注意，Go 运行时会在发生恐慌或崩溃时向标准错误输出写入信息；关闭 Stderr 可能会导致这些错误消息被重定向到其他地方，可能是稍后打开的文件。

4月24日 2:7:15 翻译注释:
// 开启文件的标志，这些标志封装了底层系统的标志。并非所有标志在特定系统上都可实现。

4月24日 2:7:16 翻译注释:
// 必须指定其中一个：O_RDONLY、O_WRONLY或O_RDWR。

4月24日 2:7:17 翻译注释:
// 以只读方式打开文件

4月24日 2:7:18 翻译注释:
// 以只写方式打开文件。

4月24日 2:7:18 翻译注释:
// 以读写方式打开文件。

4月24日 2:7:19 翻译注释:
// 可以通过按位或操作来控制其行为。

4月24日 2:7:20 翻译注释:
// 写入时向文件追加数据

4月24日 2:7:21 翻译注释:
// 如果文件不存在，则创建一个新的文件。

4月24日 2:7:22 翻译注释:
// 与 O_CREATE 一起使用时，文件必须不存在。

4月24日 2:7:22 翻译注释:
// 用于同步 I/O。

4月24日 2:7:23 翻译注释:
// 打开时截断常规可写文件

4月24日 2:7:24 翻译注释:
// Seek的whence值。
//
// 不推荐使用：请使用io.SeekStart，io.SeekCurrent和io.SeekEnd。

4月24日 2:7:25 翻译注释:
// 从文件的起始位置开始搜索

4月24日 2:7:26 翻译注释:
// 从当前偏移量开始搜索

4月24日 2:7:27 翻译注释:
// 从末尾处进行相对定位

4月24日 2:7:42 翻译注释:
// ```go
//func TestStartProcess(t *testing.T) {
// 测试环境必须支持执行命令
//testenv.MustHaveExec(t)
// 并行执行测试
//t.Parallel()
// 
// 根据操作系统设置变量
//var dir, cmd string
//var args []string
// 判断当前操作系统
//switch runtime.GOOS {
// 如果是Android，跳过测试（因为没有/bin/pwd）
//case "android":
//	t.Skip("android doesn't have /bin/pwd")
// 如果是Windows
//case "windows":
// 设置cmd为环境变量COMSPEC的值
//	cmd = Getenv("COMSPEC")
// 设置dir为环境变量SystemRoot的值
//	dir = Getenv("SystemRoot")
// 设置args为/c和cd
//	args = []string{"/c", "cd"}
// 其他情况（默认为非Windows系统）
//default:
// 使用LookPath查找"pwd"命令
//	var err error
//	cmd, err = exec.LookPath("pwd")
// 如果找不到"pwd"，终止测试
//	if err != nil {
//		t.Fatalf("Can't find pwd: %v", err)
//	}
// 设置dir为"/"
//	dir = "/"
// 设置args为空
//	args = []string{}
// 打印正在使用的命令进行测试
//	t.Logf("Testing with %v", cmd)
//}
// 
// 分离cmd的目录和基础命令
//cmddir, cmdbase := filepath.Split(cmd)
// 将基础命令添加到args列表的前面
//args = append([]string{cmdbase}, args...)
// 运行绝对路径测试
//t.Run("absolute", testStartProcess(dir, cmd, args, dir))
// 运行相对路径测试
//t.Run("relative", testStartProcess(cmddir, cmdbase, args, cmddir))
//}
// ```
// 
// 这段代码是一个Go语言的测试函数，用于测试`StartProcess`功能。它根据不同的操作系统设置命令和参数，并分别测试绝对路径和相对路径的情况。

4月24日 2:7:54 翻译注释:
// 
// // 测试RandomLen函数
// func TestRandomLen(t *testing.T) {
//     // 重复5次循环
//     for i := 0; i < 5; i++ {
//         dir, err := MkdirTemp(t.TempDir(), "*") // 在临时目录下创建子目录
//         if err != nil {
//             t.Fatal(err) // 如果出错，打印错误并终止测试
//         }
//         base := filepath.Base(dir) // 获取子目录的基名
//         if len(base) > 10 { // 如果基名长度超过10
//             t.Errorf("MkdirTemp返回的基名长度为%d：%s", len(base), base) // 打印错误信息
//         }
//     }
//     // 再次重复5次循环
//     for i := 0; i < 5; i++ {
//         f, err := CreateTemp(t.TempDir(), "*") // 在临时目录下创建临时文件
//         if err != nil {
//             t.Fatal(err) // 如果出错，打印错误并终止测试
//         }
//         base := filepath.Base(f.Name()) // 获取文件的基名
//         f.Close() // 关闭文件
//         if len(base) > 10 { // 如果基名长度超过10
//             t.Errorf("CreateTemp返回的基名长度为%d：%s", len(base), base) // 打印错误信息
//         }
//     }
// }

4月24日 2:7:55 翻译注释:
// 操作系统特定的路径分隔符

4月24日 2:7:56 翻译注释:
// 操作系统特定的路径列表分隔符

4月24日 2:7:57 翻译注释:
// Args 保存了命令行参数，从程序名称开始。

4月24日 2:7:59 翻译注释:
// 定义的文件模式位是最显著的FileMode位。最不显著的九位是标准Unix的rwxrwxrwx权限。这些位的值应被视为公共API的一部分，可能用于电线协议或磁盘表示：它们不能更改，尽管可能会添加新的位。

4月24日 2:8:1 翻译注释:
// 这些单个字母是 `String` 方法格式化中使用的缩写。

4月24日 2:8:2 翻译注释:
// T：临时文件；仅适用于Plan 9

4月24日 2:8:2 翻译注释:
// c: 当ModeDevice设置时，表示Unix字符设备

4月24日 2:8:3 翻译注释:
// ?: 非常规文件；关于此文件没有其他信息

4月24日 2:8:4 翻译注释:
// 类型位的掩码。对于普通文件，不会设置任何位。

4月24日 2:8:5 翻译注释:
// Unix权限位，0o777

4月24日 2:8:6 翻译注释:
//版权所有2019 Go语言作者。所有权利保留。
//使用此源代码受BSD风格
//可以在LICENSE文件中找到的许可证。

4月24日 2:8:8 翻译注释:
// 包cfg包含了Go命令和internal/testenv共享的配置。那些不需要对外部cmd/go暴露的定义应该放在cmd/go/internal/cfg包中，而不是这个包。

4月24日 2:8:9 翻译注释:
// KnownEnv 是影响 Go 命令运行的一系列环境变量。

4月24日 2:8:12 翻译注释:
// 版权所有 2018 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:8:13 翻译注释:
// OSArch 是一个 GOOS 和 GOARCH 值的组合，表示一个操作系统平台。

4月24日 2:8:16 翻译注释:
// RaceDetectorSupported报告goos/goarch是否支持竞态条件检测器。在cmd/dist/test.go中也有此函数的副本。
// 竞态检测器仅在arm64架构上支持48位虚拟内存地址（VMA）。但在编译时我们没有VMA大小信息，因此对于arm64，它始终返回true。

4月24日 2:8:17 翻译注释:
// MSanSupported报告goos/goarch是否支持内存sanitizer选项。

4月24日 2:8:18 翻译注释:
// ASanSupported 判断当前 goos/goarch 是否支持使用地址 sanitizer 选项

4月24日 2:8:19 翻译注释:
// FuzzSupported 报告 goos/goarch 是否支持模糊测试（'go test -fuzz=.'）。

4月24日 2:8:21 翻译注释:
// FuzzInstrumented 判断在 goos/goarch 环境中，是否使用了覆盖率（instrumentation）进行模糊测试。（FuzzInstrumented 意味着 FuzzSupported。）

4月24日 2:8:22 翻译注释:
// TODO(#14565)：支持更多架构。

4月24日 2:8:24 翻译注释:
// MustLinkExternal 报告 goos/goarch 是否要求使用外部链接，无论是否包含 cgo 依赖。

4月24日 2:8:25 翻译注释:
// 在某些架构上，内部链接cgo是不完整的。
// 参考：https://go.dev/issue/14449

4月24日 2:8:26 翻译注释:
// Windows/arm64内部链接功能未实现。

4月24日 2:8:27 翻译注释:
// 对于AIX或Linux，BigEndian PPC64的cgo内部链接功能未实现。
// 参见：https://go.dev/issue/8912

4月24日 2:8:30 翻译注释:
// 在 Dragonfly 系统上，线程局部存储似乎是通过动态链接器设置的，因此内部 cgo 链接无法正常工作。测试用例为 "go test runtime/cgo"。

4月24日 2:8:32 翻译注释:
// BuildModeSupported 报告给定的编译器是否支持 goos/goarch 构建模式。
// 此函数的副本在 cmd/dist/test.go 中存在。

4月24日 2:8:33 翻译注释:
// 因为linux/ppc64还不支持外部链接模式，所以不被支持。

4月24日 2:8:35 翻译注释:
// 其他目标不支持 `-shared`，这是根据 `cmd/compile/internal/base/flag.go` 中的 ParseFlags 执行的。
// 对于 c-archives，Go 工具会传递 `-shared`，以便生成的结果适合包含在 PIE（可执行格式）或共享库中。

4月24日 2:8:39 翻译注释:
// DefaultPIE 报告在使用“默认”构建模式时，goos/goarch 是否会产生一个 PIE（位置无关可执行文件）二进制文件。对于 Windows 平台，这会受到 -race 标志的影响，因此要求调用者传入该标志以集中处理该选项。

4月24日 2:8:40 翻译注释:
// PIE在Windows上不支持-race选项；详情见https://go.dev/cl/416174。

4月24日 2:8:42 翻译注释:
// ExecutableHasDWARF 判断在 goos/goarch 平台上，链接后的可执行文件是否包含 DWARF 符号。

4月24日 2:8:43 翻译注释:
// osArchInfo描述了从cmd/dist中提取的关于OSArch的信息，并存储在生成的distInfo映射中。

4月24日 2:8:44 翻译注释:
// CgoSupported 报告 goos/goarch 是否支持 cgo。

4月24日 2:8:46 翻译注释:
// Broken reports 是否认为goos/goarch是一个被认为存在问题的端口。
// （参考 https://go.dev/wiki/PortingPolicy#broken-ports.）

4月24日 2:8:47 翻译注释:
// 该代码由 `go test internal/platform -fix` 自动生成。请勿修改。

4月24日 2:8:48 翻译注释:
// 若要更改此文件中的信息，编辑 cmd/dist/build.go 中的 cgoEnabled 和/或 firstClass 映射，然后运行 'go generate internal/platform'。

4月24日 2:8:50 翻译注释:
// List 是所有有效 GOOS/GOARCH 组合的列表，
// 包括已知存在问题的端口。

4月24日 2:8:52 翻译注释:
// 版权归2017年Go作者所有。保留所有权利。
// 使用此源代码受BSD风格
// 可在LICENSE文件中找到的许可协议管辖。

4月24日 2:8:52 命中翻译缓存:
// 版权归2017年Go作者所有。保留所有权利。
// 使用此源代码受BSD风格
// 可在LICENSE文件中找到的许可协议管辖。

4月24日 2:8:52 翻译注释:
// 版权归2017年Go作者所有。保留所有权利。
// 使用此源代码受BSD风格
// 可在LICENSE文件中找到的许可协议管辖。

4月24日 2:8:53 翻译注释:
// 一个指向页面区域基地址的指针。

4月24日 2:8:54 翻译注释:
// VirtualAlloc函数分配的页面范围的基地址的指针。BaseAddress成员指向的页面包含在此分配范围内。

4月24日 2:8:56 翻译注释:
// 分配该区域时所采用的内存保护选项

4月24日 2:8:57 翻译注释:
// 从基地址开始的区域大小，其中所有页面具有相同的属性，以字节为单位。

4月24日 2:8:57 翻译注释:
// 该区域页面的状态。

4月24日 2:8:58 翻译注释:
// 区域中页面的访问保护。

4月24日 2:8:59 翻译注释:
// 区域中页面的类型

4月24日 2:9:1 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:9:2 翻译注释:
// 版权所有 2021 Go 作者。保留所有权利。
// 本源代码的使用受BSD风格许可证管辖，该许可证可在LICENSE文件中找到。

4月24日 2:9:2 命中翻译缓存:
// 版权所有 2021 Go 作者。保留所有权利。
// 本源代码的使用受BSD风格许可证管辖，该许可证可在LICENSE文件中找到。

4月24日 2:9:2 翻译注释:
// 版权归2017年Go作者所有。保留所有权利。
// 使用此源代码受BSD风格
// 可在LICENSE文件中找到的许可协议管辖。

4月24日 2:9:2 命中翻译缓存:
// 版权归2017年Go作者所有。保留所有权利。
// 使用此源代码受BSD风格
// 可在LICENSE文件中找到的许可协议管辖。

4月24日 2:9:2 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:9:7 翻译注释:
// 这些结构在以下文档中进行描述：
// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca069dad-ed16-42aa-b057-b6b207f447cc
// 和
// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/b41f1cbf-10df-4a47-98d4-1c52a833d913。

4月24日 2:9:8 翻译注释:
// REPARSE_DATA_BUFFER_HEADER 是 REPARSE_DATA_BUFFER 结构体的公共部分。

4月24日 2:9:10 翻译注释:
// 重新解析数据的大小，以字节为单位，紧跟在
// REPARSE_DATA_BUFFER 元素的公共部分后面。
// 这个值是从 SubstituteNameOffset 字段开始的数据长度。

4月24日 2:9:12 翻译注释:
// 包含替换名称字符串在PathBuffer数组中的偏移量（以字节为单位），它是从PathBuffer的第一个字节开始计算的。需要注意的是，这个偏移量需要除以2来得到数组的索引。

4月24日 2:9:14 翻译注释:
// 包含替换名称字符串的字节数的整数。如果此字符串以空字符终止，SubstituteNameLength 不包括 Unicode 空字符。

4月24日 2:9:15 翻译注释:
// PrintNameOffset 与 SubstituteNameOffset 类似

4月24日 2:9:16 翻译注释:
// PrintNameLength 与 SubstituteNameLength 相似。

4月24日 2:9:17 翻译注释:
// Flags 指定替换名称是完整路径名还是相对于符号链接所在目录的路径名。

4月24日 2:9:18 翻译注释:
// Path 返回 rb 中存储的路径。

4月24日 2:9:18 命中翻译缓存:
// Path 返回 rb 中存储的路径。

4月24日 2:9:18 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:9:19 翻译注释:
// 调用 AdjustTokenPrivileges 失败

4月24日 2:9:19 翻译注释:
// AdjustTokenPrivileges 调用成功

4月24日 2:9:20 翻译注释:
// GetLastError返回了ERROR_SUCCESS

4月24日 2:9:21 翻译注释:
// 在 runtime 包中实现。

4月24日 2:9:21 命中翻译缓存:
// 在 runtime 包中实现。

4月24日 2:9:21 翻译注释:
// 版权所有 2018 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:9:26 翻译注释:
// 对于 CreateSymbolicLink()，自 Windows 10（版本 1703，内部版本 10.0.14972）起支持符号链接

4月24日 2:9:27 翻译注释:
// FileInformationClass 值

4月24日 2:9:27 翻译注释:
// FILE_ATTRIBUTE_TAG_INFO：文件属性标签信息

4月24日 2:9:28 翻译注释:
// FILE_REMOTE_PROTOCOL_INFO

4月24日 2:9:55 翻译注释:
// 版权所有 2014 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可协议约束，
// 该协议可在 LICENSE 文件中找到。

4月24日 2:9:57 翻译注释:
// UTF16PtrToString 与 UTF16ToString 类似，但接受 *uint16 作为参数，而不是 []uint16。

4月24日 2:9:57 翻译注释:
// 用于CreateToolhelp32Snapshot的标志

4月24日 2:9:58 翻译注释:
// 来自lmshare.h的常量

4月24日 2:10:5 翻译注释:
// 代码由'go generate'命令生成；请勿编辑。

4月24日 2:10:6 翻译注释:
// 只对常见的Errno值进行一次接口分配。

4月24日 2:10:7 翻译注释:
// errnoErr 返回常见的boxed Errno 值，以防止在运行时进行分配。

4月24日 2:10:8 翻译注释:
// TODO：在这里添加更多，收集完Windows上常见的错误值后（可能在运行all.bat时）？

4月24日 2:10:11 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:10:11 命中翻译缓存:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:10:11 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:10:29 翻译注释:
// 包 registry 提供对 Windows 注册表的访问。
//
// 以下是一个简单的示例，打开一个注册表键并从中读取字符串值：
//
//	k, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer k.Close()
//
//	s, _, err := k.GetStringValue("SystemRoot")
//	if err != nil {
//		log.Fatal(err)
//	}
//	fmt.Printf("Windows 系统根目录是 %q\n", s)
//
// 注意：此包是 golang.org/x/sys/windows/registry 的副本，
// 删除了 KeyInfo.ModTime 以防止依赖循环。

4月24日 2:10:45 翻译注释:
// 注册表键的安全性和访问权限。
// 详情请参阅：https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights

4月24日 2:11:14 翻译注释:
// Key 是一个打开的 Windows 注册表键的句柄。键可以通过调用 OpenKey 获取；还有一些预定义的根键，如 CURRENT_USER。
// 键可以直接用于 Windows API。

4月24日 2:11:18 翻译注释:
// Windows 定义了一些始终处于打开状态的预定义根键。
// 应用程序可以将这些键作为访问注册表的入口点。
// 通常，这些键用于 OpenKey 中以打开新的键，
// 但也可以在需要 Key 的任何地方使用它们。

4月24日 2:11:31 翻译注释:
// Close 关闭打开的键 k。

4月24日 2:11:33 翻译注释:
// OpenKey 打开一个新的密钥，其路径名相对于键 k。它接受任何打开的密钥，包括 CURRENT_USER 等，并返回新的密钥和一个错误。access 参数指定了要打开的密钥所需的访问权限。

4月24日 2:11:34 翻译注释:
// ReadSubKeyNames 返回键k的子键名称。

4月24日 2:11:36 翻译注释:
// 必须反复调用且直至完成RegEnumKeyEx。
// 在此期间，此goroutine不能从其当前线程迁移离开。参见#49320。

4月24日 2:11:38 翻译注释:
// 注册表键的大小限制为255字节，具体描述如下：
// https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-element-size-limits

4月24日 2:11:38 翻译注释:
//额外预留一个终止零字节的空间

4月24日 2:11:39 翻译注释:
// 将缓冲区大小翻倍，然后重试。

4月24日 2:11:42 翻译注释:
// CreateKey 在已打开的键 k 下创建一个名为 path 的键。
// CreateKey 返回新创建的键以及一个布尔标志，该标志报告
// 键是否已存在。
// 参数 access 指定要创建的键的访问权限。

4月24日 2:11:43 翻译注释:
// DeleteKey 删除键k的子键路径及其值。

4月24日 2:11:44 翻译注释:
// KeyInfo描述密钥的统计信息。它是通过Stat返回的。

4月24日 2:11:50 翻译注释:
// Stat获取打开的键k的信息。

4月24日 2:11:50 命中翻译缓存:
// Stat获取打开的键k的信息。

4月24日 2:11:51 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:11:51 命中翻译缓存:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:11:51 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:11:52 翻译注释:
// 每台PC都已安装了“stdole 2.0 OLE 自动化”库

4月24日 2:11:53 翻译注释:
// 无缓冲地读取数据

4月24日 2:11:53 翻译注释:
// 使用短缓冲区读取数据

4月24日 2:11:54 翻译注释:
// 检查 GetValue 如所需返回 ErrNotExist

4月24日 2:11:56 翻译注释:
// utf16字符串的字节大小并非完美无缺，
// 但对于当前测试值是正确的。
// 字节大小同时也包含了终止符0。

4月24日 2:11:57 翻译注释:
// 计算字节，而不是uint16

4月24日 2:11:57 命中翻译缓存:
// 计算字节，而不是uint16

4月24日 2:11:57 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:11:57 命中翻译缓存:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:11:57 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:11:58 翻译注释:
// ErrShortBuffer在缓冲区太短，无法进行操作时返回。

4月24日 2:11:58 翻译注释:
// ErrNotExist 当注册表键或值不存在时返回。

4月24日 2:12:0 翻译注释:
// ErrUnexpectedType 是在 Get*Value 函数遇到值类型不符合预期时返回的。

4月24日 2:12:4 翻译注释:
// GetValue 用于获取与打开的键 k 关联的指定值的类型和数据。它将数据填充到缓冲区 buf 中，并返回检索到的字节数 n。如果 buf 太小无法容纳存储的值，它会返回一个 ErrShortBuffer 错误，同时返回所需的缓冲区大小 n。如果没有提供缓冲区，它将返回 true 和实际的缓冲区大小 n。如果没有提供缓冲区，GetValue 只会返回值的类型。如果该值不存在，返回的错误是 ErrNotExist。
//
// GetValue 是一个低级函数。如果已知值的类型，应使用适当的 Get*Value 函数代替。

4月24日 2:12:7 翻译注释:
//GetStringValue 从已打开的键k中获取与指定名称关联的字符串值。它还返回值的类型。如果不存在该值，GetStringValue将返回ErrNotExist。如果值不是SZ或EXPAND_SZ类型，它将返回正确的值类型并返回ErrUnexpectedType。

4月24日 2:12:9 翻译注释:
// GetMUIStringValue 从已打开的密钥 k 获取与指定值名称关联的本地化字符串值。如果值名称不存在或无法解析本地化字符串值，GetMUIStringValue 返回 ErrNotExist。

4月24日 2:12:12 翻译注释:
// 尝试使用系统目录作为 DLL 搜索路径解析字符串值；
// 这种方式假定字符串值的形式为 @[路径]\dllname,-strID，但未给出路径，例如 @tzres.dll,-320。

4月24日 2:12:13 翻译注释:
// 此方法适用于tzres.dll，但未来可能需要进行修订，以允许调用者提供自定义搜索路径。

4月24日 2:12:14 翻译注释:
// 缓冲区没有增长，假设存在竞争条件；中断

4月24日 2:12:15 翻译注释:
// ExpandString 扩展环境变量字符串，并用当前用户定义的值替换它们。
// 使用 ExpandString 来展开 EXPAND_SZ 字符串。

4月24日 2:12:19 翻译注释:
// GetStringsValue 用于从与已打开键 k 关联的指定值名中获取 []string 值。同时返回该值的类型。
// 若该值不存在，GetStringsValue 将返回 ErrNotExist 错误。
// 若该值并非 MULTI_SZ 类型，它将返回正确的值类型及 ErrUnexpectedType 错误。

4月24日 2:12:20 翻译注释:
// 移除结束时的空字符

4月24日 2:12:22 翻译注释:
// GetIntegerValue 从已打开的密钥 k 关联的指定值名称中检索整数值。它还返回值的类型。如果值不存在，GetIntegerValue 返回 ErrNotExist。如果值不是 DWORD 或 QWORD 类型，它将返回正确的值类型并返回 ErrUnexpectedType。

4月24日 2:12:25 翻译注释:
// GetBinaryValue 从已打开的键k关联的指定值名称中检索二进制值。它还返回值的类型。如果值不存在，GetBinaryValue 返回 ErrNotExist。如果值不是 BINARY 类型，它将返回正确的值类型和 ErrUnexpectedType。

4月24日 2:12:26 翻译注释:
// SetDWordValue 将键 k 下的某个名称值的数据和类型设置为 value 和 DWORD。

4月24日 2:12:27 翻译注释:
// SetQWordValue 设置键k下名称值的数据和类型为value和QWORD。

4月24日 2:12:28 翻译注释:
// SetStringValue 将键 k 下的名称值的数据和类型设置为 value 和 SZ。值中不能包含零字节。

4月24日 2:12:30 翻译注释:
// SetExpandStringValue 将键 k 下的名称值的数据和类型设置为 value 和 EXPAND_SZ。值中不能包含零字节。

4月24日 2:12:32 翻译注释:
// SetStringsValue 将键 k 下名为 name 的值的数据类型和值设置为 value 和 MULTI_SZ。值字符串中不得包含零字节。

4月24日 2:12:33 翻译注释:
// SetBinaryValue 将键 k 下的名称值的数据和类型设置为 value 和 BINARY。

4月24日 2:12:34 翻译注释:
// DeleteValue 从键 k 中删除指定名称的值。

4月24日 2:12:34 翻译注释:
// ReadValueNames 返回键 k 的值名称。

4月24日 2:12:35 翻译注释:
// 额外空间用于终止空字符

4月24日 2:12:35 命中翻译缓存:
// 额外空间用于终止空字符

4月24日 2:12:35 翻译注释:
// 将缓冲区大小翻倍，然后重试。

4月24日 2:12:35 命中翻译缓存:
// 将缓冲区大小翻倍，然后重试。

4月24日 2:12:35 翻译注释:
// 代码由'go generate'命令生成；请勿编辑。

4月24日 2:12:35 命中翻译缓存:
// 代码由'go generate'命令生成；请勿编辑。

4月24日 2:12:35 翻译注释:
// 只对常见的Errno值进行一次接口分配。

4月24日 2:12:35 命中翻译缓存:
// 只对常见的Errno值进行一次接口分配。

4月24日 2:12:35 翻译注释:
// errnoErr 返回常见的boxed Errno 值，以防止在运行时进行分配。

4月24日 2:12:35 命中翻译缓存:
// errnoErr 返回常见的boxed Errno 值，以防止在运行时进行分配。

4月24日 2:12:35 翻译注释:
// TODO：在这里添加更多，收集完Windows上常见的错误值后（可能在运行all.bat时）？

4月24日 2:12:35 命中翻译缓存:
// TODO：在这里添加更多，收集完Windows上常见的错误值后（可能在运行all.bat时）？

4月24日 2:12:35 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:12:37 翻译注释:
// 包sysdll是一个内部的叶子包，用于记录和报告Go自身使用了哪些Windows DLL名称。这些DLL随后仅从System32目录加载。参见问题14959。

4月24日 2:12:41 翻译注释:
// IsSystemDLL 判断指定的 dll 键（一个基名称，如 "foo.dll"）是否是系统 DLL，它应该只从 Windows 系统目录加载。
// 
// 文件名是区分大小写的，但这没关系，因为使用 Add 注册时的大小写与稍后使用 LoadDLL 时的大小写相同。
// 
// 它没有关联的互斥锁，只能串行修改（目前：仅在初始化期间），并且不应与 DLL 加载操作并发进行。

4月24日 2:12:42 翻译注释:
// 添加注释，说明dll是一个系统32库，应该仅从Windows SYSTEM32目录加载。它返回其参数，以便于生成代码的使用。

4月24日 2:12:42 命中翻译缓存:
// 添加注释，说明dll是一个系统32库，应该仅从Windows SYSTEM32目录加载。它返回其参数，以便于生成代码的使用。

4月24日 2:12:42 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:12:51 翻译注释:
// MustHaveExec 检查当前系统是否能够使用 os.StartProcess 或（更常见地）exec.Command 启动新进程。
// 若不能，MustHaveExec 会调用 t.Skip 并附带解释原因。
//
// 在某些平台上，MustHaveExec 通过重新执行当前可执行文件来检查 exec 支持情况，
// 此可执行文件必须是由 'go test' 构建的二进制文件。我们有意不提供 HasExec 函数，
// 因为在 TestMain 函数中存在不合适递归的风险。
//
// 要在测试之外检查 exec 支持情况，只需尝试执行命令即可。若不支持 exec，
// 对于由此产生的错误，testenv.SyscallIsNotSupported 将返回 true。

4月24日 2:12:51 翻译注释:
// 假设exec总是在非移动平台和Android上正常工作。

4月24日 2:12:56 翻译注释:
// 在iOS中有一个exec系统调用，但在实际的iOS设备上可能会返回权限错误。在模拟环境中（如Corellium主机），它可能会成功。因此，如果我们需要执行，就只能尝试并找出结果。
// 
// 截至2023-04-19，wasip1和js根本没有exec系统调用，但我们最好使用相同的路径，这样即使没有iOS环境，这个分支也可以进行测试。

4月24日 2:13:3 翻译注释:
// 这不是一个标准的 "go test" 可执行文件，所以我们不知道如何以不会产生副作用的方式自我执行。就忽略它吧。

4月24日 2:13:5 翻译注释:
// 我们知道这是一个测试可执行文件。我们应该能够使用一个无操作（no-op）标志来运行它，以检查总体上的执行支持情况。

4月24日 2:13:7 翻译注释:
// MustHaveExecPath 检查当前系统是否能够使用 os.StartProcess 或（更常见地）exec.Command 启动指定的可执行文件。
// 如果不能，MustHaveExecPath 将调用 t.Skip 并给出解释。

4月24日 2:13:11 翻译注释:
// CleanCmdEnv 将向 cmd.Env 中填充环境，但排除可能修改 Go 工具行为的某些变量，如 GODEBUG 和 GOTRACEBACK。
// 
// 如果调用者想要设置 cmd.Dir，请在调用此函数之前设置，以便 PWD 在环境中被正确设置。

4月24日 2:13:13 翻译注释:
// 从环境中排除GODEBUG，防止其输出破坏试图解析其他命令输出的测试。

4月24日 2:14:4 通义千问翻译返回为空 

4月24日 2:14:9 翻译注释:
// CommandContext 类似于 exec.CommandContext，但有以下不同：
//   - 如果平台不支持 os/exec，则跳过 t
//   - 在 Cancel 函数中发送 SIGQUIT（如果平台支持）而不是 SIGKILL
//   - 如果测试有截止时间，会在测试截止时间前添加一个上下文超时和 WaitDelay 以提供一段任意的宽限期
//   - 如果命令在测试的截止时间之前未完成，会导致测试失败
//   - 设置一个 Cleanup 函数，用于检查测试是否泄漏了子进程

4月24日 2:14:10 翻译注释:
// 除非测试有截止日期（为了允许交互式调试），否则是无限的

4月24日 2:14:11 翻译注释:
// 从一个最小的超时时间开始，足够长的时间来消耗一个合理程序终止后的输出。

4月24日 2:14:13 翻译注释:
// 如果时间允许，将终止宽限期增加到测试剩余时间的5%。

4月24日 2:14:16 翻译注释:
// 当我们运行产生子进程的命令时，我们需要预留两个宽限期来清理：
// 一个是从首次发送终止信号（通过Cancel回调在Context超时时）到
// 进程被强制终止（通过WaitDelay字段）之间的延迟，
// 另一个是进程被终止和测试记录其输出以供调试之间的延迟。
//
// （我们希望确保在测试进程本身被终止之前有足够的时间记录输出。）

4月24日 2:14:18 翻译注释:
// 如果上下文没有截止日期，或者其截止日期在测试超时时（或接近）已经过期。
// 添加一个较短的超时时间，以便测试能够产生有用的输出。

4月24日 2:14:20 翻译注释:
// 命令因 ctx 被取消而终止，但似乎不是由于我们添加的明确测试截止时间。如果这对诊断失败有帮助，请记录该信息，但不要因此实际失败测试。

4月24日 2:14:22 翻译注释:
// Command 类似于 exec.Command，但会应用与 testenv.CommandContext（使用默认的 Context）相同的变化。

4月24日 2:14:23 翻译注释:
// 版权归2022年Go语言作者所有。保留所有权利。
// 使用此源代码受BSD风格许可协议管辖，
// 可在LICENSE文件中找到该协议。

4月24日 2:14:24 翻译注释:
// OptimizationOff报告是否已禁用优化。

4月24日 2:14:24 命中翻译缓存:
// OptimizationOff报告是否已禁用优化。

4月24日 2:14:24 翻译注释:
// 版权归2022年Go语言作者所有。保留所有权利。
// 使用此源代码受BSD风格许可协议管辖，
// 可在LICENSE文件中找到该协议。

4月24日 2:14:24 命中翻译缓存:
// 版权归2022年Go语言作者所有。保留所有权利。
// 使用此源代码受BSD风格许可协议管辖，
// 可在LICENSE文件中找到该协议。

4月24日 2:14:24 翻译注释:
// OptimizationOff报告是否已禁用优化。

4月24日 2:14:24 命中翻译缓存:
// OptimizationOff报告是否已禁用优化。

4月24日 2:14:24 翻译注释:
// 版权所有 2015 The Go 作者。保留所有权利。
// 本源代码的使用受 BSD 风格许可证约束，
// 该许可证可在 LICENSE 文件中找到。

4月24日 2:14:26 翻译注释:
// 包testenv提供了关于Go团队在不同测试环境中可用的功能信息。
// 
// 这是一个内部包，因为这些详细信息是针对Go团队的测试环境（在build.golang.org上）特定的，并非测试的一般原理。

4月24日 2:14:29 翻译注释:
// 在init期间保存原始环境，以供检查时使用。测试二进制文件可能在调用HasExec之前修改其环境，以改变其行为（例如模拟命令行工具），而该修改后的环境可能导致环境检查行为异常。

4月24日 2:14:31 翻译注释:
// Builder 返回运行此测试的构建器的名称（例如，“linux-amd64”或“windows-386-gce”）。
// 如果测试不在构建基础设施上运行，Builder 将返回空字符串。

4月24日 2:14:34 翻译注释:
// 要求每次调用`go`命令的用户都传递`"-gcflags="+os.Getenv("GO_GCFLAGS")`太麻烦了。
// 当前，如果`$GO_GCFLAGS`已设置，我们报告无法运行`go build`。

4月24日 2:14:37 翻译注释:
// 要运行`go build`，我们需要能够执行一个`go`命令。
// 我们有点随意地选择执行`go tool -n compile`，因为这也确认了cmd/go可以找到编译器。（在CL 472096之前，
// 我们有时会在测试环境中安装没有实际用于构建东西的cmd/go，而它缺少cmd/compile。）

4月24日 2:14:42 翻译注释:
// 我们可以认为我们总是拥有完整的 Go 工具链可用。
// 然而，此平台要求即使构建纯 Go 程序（包括测试）也需要 C 链接器。测试环境中是否具备？
// （例如在 Android 上，运行测试的设备可能没有安装 C 工具链。）
//
// 如果显式设置了 CC，则假定我们具备。否则，使用 'go env CC' 来确定它将默认使用哪个工具链。

4月24日 2:14:43 翻译注释:
// 目前，使用"go run"和使用"go build"是相同的。

4月24日 2:14:45 翻译注释:
// HasParallelism报告当前系统是否可以并行执行多个线程。
// 在cmd/dist/test.go中有一个此函数的副本。

4月24日 2:14:46 翻译注释:
// MustHaveParallelism 检查当前系统是否可以同时执行多个线程。如果不可以，MustHaveParallelism 会调用 t.Skip 并附带一个解释。

4月24日 2:14:50 翻译注释:
// GoToolPath 返回 Go 工具的路径。
// 它是对 GoTool 的便捷包装。
// 若工具不可用，GoToolPath 将调用 t.Skip。
// 若工具本应可用但实际不可用，GoToolPath 将调用 t.Fatal。

4月24日 2:14:51 翻译注释:
// 将所有影响Go命令的环境变量添加到测试元数据中。
// 当这些变量改变时，缓存的测试结果将被失效。
// 参见golang.org/issue/32285。

4月24日 2:14:54 翻译注释:
// 如果runtime.GOROOT()非空，假设它是有效的。
// 
// (它可能不是：例如，用户可能已明确将GOROOT设置为错误的目录，或者明确设置了GOROOT_FINAL但没有设置GOROOT，并且还没有将树移动到GOROOT_FINAL。但这些情况很少见，如果发生这种情况，用户可以修复他们破坏的东西。)

4月24日 2:15:0 翻译注释:
// runtime.GOROOT 不知道 GOROOT 在哪里（可能是因为测试二进制文件是使用 -trimpath 构建的，或者是因为设置了 GOROOT_FINAL 但没有将树移动到该位置）。
// 
// 由于这是 internal/testenv，我们可以作弊并假设调用者是 GOROOT/src 子目录中某个包的测试。`go test`会在包含被测试包的目录中运行测试。这意味着如果我们开始向上遍历树，最终应该找到 GOROOT/src/go.mod，我们可以报告出那个目录的父目录。
// 
// 值得注意的是，即使我们不能作为子进程运行 `go env GOROOT`，这仍然有效。

4月24日 2:15:1 翻译注释:
// dir 是 "." 或仅为卷名。

4月24日 2:15:2 翻译注释:
// 发现了"module std"，这是在GOROOT/src中的模块声明！

4月24日 2:15:5 翻译注释:
// GOROOT 会报告包含 Go 项目源代码树根目录的路径。这通常等同于 runtime.GOROOT，但在使用 -trimpath 构建测试二进制文件且无法执行 'go env GOROOT' 的情况下仍然有效。
// 
// 如果找不到 GOROOT，如果 t 不为 nil，则跳过 t，否则会 panic。

4月24日 2:15:6 翻译注释:
// GoTool报告Go工具的路径。

4月24日 2:15:7 翻译注释:
// HasSrc 报告整个源代码树是否可在 GOROOT 下获取。

4月24日 2:15:8 翻译注释:
// HasExternalNetwork 报告当前系统是否可以使用外部（非本地回环）网络。

4月24日 2:15:10 翻译注释:
// MustHaveExternalNetwork 检查当前系统是否可以使用外部（非localhost）网络。
// 如果不能，MustHaveExternalNetwork 会调用 t.Skip 并附带一个解释。

4月24日 2:15:11 翻译注释:
// HasCGO报告当前系统是否可以使用cgo。

4月24日 2:15:13 翻译注释:
// MustHaveCGO 若无 cgo 可用则调用 t.Skip

4月24日 2:15:14 翻译注释:
// CanInternalLink 报告当前系统是否支持使用内部链接来链接程序。

4月24日 2:15:15 翻译注释:
// MustInternalLink 检查当前系统是否支持内部链接程序。
// 如果不支持，MustInternalLink 会调用 t.Skip 并附带一个解释。

4月24日 2:15:17 翻译注释:
// MustHaveBuildMode 检查当前系统是否能够在给定的构建模式下构建程序。
// 如果不能，MustHaveBuildMode 将调用 t.Skip 并附带一个解释。

4月24日 2:15:18 翻译注释:
// HasSymlink 报告当前系统是否可以使用 os.Symlink。

4月24日 2:15:20 翻译注释:
// MustHaveSymlink 检查当前系统是否支持使用 os.Symlink。
// 如果不支持，MustHaveSymlink 将调用 t.Skip 并附带解释。

4月24日 2:15:21 翻译注释:
// HasLink报告当前系统是否可以使用os.Link。

4月24日 2:15:23 翻译注释:
// 从Android M（棉花糖）版本开始，硬链接文件被阻止，并尝试对文件调用link()会返回EACCES错误。
// - https://code.google.com/p/android-developer-preview/issues/detail?id=3150

4月24日 2:15:25 翻译注释:
// MustHaveLink 判断当前系统是否支持使用 os.Link。
// 若不支持，MustHaveLink 会调用 t.Skip 并附带解释原因。

4月24日 2:15:26 翻译注释:
// CPUIsSlow 报告测试运行的CPU是否疑似性能较慢。

4月24日 2:15:28 翻译注释:
// SkipIfShortAndSlow 如果设置了 `-short` 并且怀疑运行测试的 CPU 性能较慢，则跳过 `t`。
//
// （这对于那些通常很快完成但需要大量 CPU 资源的测试很有用。）

4月24日 2:15:29 翻译注释:
// SkipIfOptimizationOff 如果优化被关闭，则跳过t。

4月24日 2:15:34 翻译注释:
// WriteImportcfg编写一个由编译器或链接器使用的importcfg文件，
// 并将其写入dstPath。该文件包含packageFiles中文件映射的条目，
// 同时也包含由pkgs中包（们）递归导入的所有包的信息。
// 
// pkgs可以包含任何可合法传递给'go list'命令的包模式，
// 因此它也可以是一组位于同一目录下的Go源文件列表。

4月24日 2:15:35 翻译注释:
// 使用 'go list' 命令来解析任何缺失的包，并重写导入映射。

4月24日 2:15:36 翻译注释:
// SyscallIsNotSupported 检查错误是否可能表示当前平台或执行环境不支持系统调用。

4月24日 2:15:36 命中翻译缓存:
// SyscallIsNotSupported 检查错误是否可能表示当前平台或执行环境不支持系统调用。

4月24日 2:15:36 翻译注释:
// 版权所有 2021 Go 作者。保留所有权利。
// 本源代码的使用受BSD风格许可证管辖，该许可证可在LICENSE文件中找到。

4月24日 2:15:38 翻译注释:
// Sigquit是用于杀死挂起子进程的信号。
// 在Unix系统中，我们发送SIGQUIT信号，但在非Unix系统中，我们只使用os.Kill。

4月24日 2:15:38 命中翻译缓存:
// Sigquit是用于杀死挂起子进程的信号。
// 在Unix系统中，我们发送SIGQUIT信号，但在非Unix系统中，我们只使用os.Kill。

4月24日 2:15:38 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:15:41 翻译注释:
// 对于wasip1，某些运行时禁止使用绝对符号链接，
// 或者那些能够脱离当前工作目录的符号链接。
// 执行一个简单的测试以判断运行时是否支持符号链接。
// 如果我们遇到权限错误，则说明运行时不支持符号链接。

4月24日 2:15:41 命中翻译缓存:
// 对于wasip1，某些运行时禁止使用绝对符号链接，
// 或者那些能够脱离当前工作目录的符号链接。
// 执行一个简单的测试以判断运行时是否支持符号链接。
// 如果我们遇到权限错误，则说明运行时不支持符号链接。

4月24日 2:15:41 翻译注释:
// 版权所有 2021 Go 作者。保留所有权利。
// 本源代码的使用受BSD风格许可证管辖，该许可证可在LICENSE文件中找到。

4月24日 2:15:42 翻译注释:
// Sigquit 是用来杀死挂起子进程的信号。
// 发送 SIGQUIT 信号可以获得堆栈跟踪。

4月24日 2:15:43 翻译注释:
// 用户缺少权限：要么调用需要root权限，但用户不是root，要么被容器安全策略拒绝。

4月24日 2:15:44 翻译注释:
// 如果系统调用被安全策略拒绝，一些容器可能会返回EINVAL而不是EPERM。

4月24日 2:15:44 命中翻译缓存:
// 如果系统调用被安全策略拒绝，一些容器可能会返回EINVAL而不是EPERM。

4月24日 2:15:44 翻译注释:
//版权所有2016 The Go Authors。所有权利保留。
//使用此源代码受BSD风格的
//可在LICENSE文件中找到的许可协议管辖。

4月24日 2:15:44 通义千问翻译完毕

4月24日 11:49:55 开始替换注释

4月24日 11:49:55 开始替换注释

4月24日 11:49:56 替换注释:
// Portable analogs of some common system call errors.
//
// Errors returned from this package may be tested against these errors
// with errors.Is.

4月24日 11:49:56 替换注释:
	// ErrInvalid indicates an invalid argument.
	// Methods on File will return this error when the receiver is nil.

4月24日 11:49:56 替换注释:
	//ErrNoDeadline       = errNoDeadline()       // "file type does not support deadline"
	//ErrDeadlineExceeded = errDeadlineExceeded() // "i/o timeout"

4月24日 11:49:56 替换注释:
// testingForceReadDirLstat forces ReadDir to call Lstat, for testing that code path.
// This can be difficult to provoke on some Unix systems otherwise.

4月24日 11:49:56 替换注释:
// checkWrapErr is the test hook to enable checking unexpected wrapped errors of poll.ErrFileClosing.
// It is set to true in the export_test.go for tests (including fuzz tests).

4月24日 11:49:56 替换注释:
// Export for testing.
// This is set via go:linkname on runtime.canUseLongPaths, and is true when the OS
// supports opting into proper long path handling without the need for fixups.

4月24日 11:49:56 替换注释:
// allowReadDirFileID indicates whether File.readdir should try to use FILE_ID_BOTH_DIR_INFO
// if the underlying file system supports it.
// Useful for testing purposes.

4月24日 11:49:56 替换注释:
//FixLongPath        = fixLongPath

4月24日 11:49:56 替换注释:
//CommandLineToArgv  = commandLineToArgv

4月24日 11:49:56 替换注释:
// Stdin, Stdout, and Stderr are open Files pointing to the standard input,
// standard output, and standard error file descriptors.
//
// Note that the Go runtime writes to standard error for panics and crashes;
// closing Stderr may cause those messages to go elsewhere, perhaps
// to a file opened later.

4月24日 11:49:56 替换注释:
// Flags to OpenFile wrapping those of the underlying system. Not all
// flags may be implemented on a given system.

4月24日 11:49:56 替换注释:
// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.

4月24日 11:49:56 替换注释:
// open the file read-only.

4月24日 11:49:56 替换注释:
// open the file write-only.

4月24日 11:49:56 替换注释:
// open the file read-write.

4月24日 11:49:56 替换注释:
// The remaining values may be or'ed in to control behavior.

4月24日 11:49:56 替换注释:
// append data to the file when writing.

4月24日 11:49:56 替换注释:
// create a new file if none exists.

4月24日 11:49:56 替换注释:
// used with O_CREATE, file must not exist.

4月24日 11:49:56 替换注释:
// open for synchronous I/O.

4月24日 11:49:56 替换注释:
// truncate regular writable file when opened.

4月24日 11:49:56 替换注释:
// Seek whence values.
//
// Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.

4月24日 11:49:56 替换注释:
// seek relative to the origin of the file

4月24日 11:49:56 替换注释:
// seek relative to the current offset

4月24日 11:49:56 替换注释:
// seek relative to the end

4月24日 11:49:57 替换注释:
//func TestStartProcess(t *testing.T) {
//	testenv.MustHaveExec(t)
//	t.Parallel()
//
//	var dir, cmd string
//	var args []string
//	switch runtime.GOOS {
//	case "android":
//		t.Skip("android doesn't have /bin/pwd")
//	case "windows":
//		cmd = Getenv("COMSPEC")
//		dir = Getenv("SystemRoot")
//		args = []string{"/c", "cd"}
//	default:
//		var err error
//		cmd, err = exec.LookPath("pwd")
//		if err != nil {
//			t.Fatalf("Can't find pwd: %v", err)
//		}
//		dir = "/"
//		args = []string{}
//		t.Logf("Testing with %v", cmd)
//	}
//	cmddir, cmdbase := filepath.Split(cmd)
//	args = append([]string{cmdbase}, args...)
//	t.Run("absolute", testStartProcess(dir, cmd, args, dir))
//	t.Run("relative", testStartProcess(cmddir, cmdbase, args, cmddir))
//}

4月24日 11:49:57 替换注释:
//
//func TestRandomLen(t *testing.T) {
//	for range 5 {
//		dir, err := MkdirTemp(t.TempDir(), "*")
//		if err != nil {
//			t.Fatal(err)
//		}
//		base := filepath.Base(dir)
//		if len(base) > 10 {
//			t.Errorf("MkdirTemp returned len %d: %s", len(base), base)
//		}
//	}
//	for range 5 {
//		f, err := CreateTemp(t.TempDir(), "*")
//		if err != nil {
//			t.Fatal(err)
//		}
//		base := filepath.Base(f.Name())
//		f.Close()
//		if len(base) > 10 {
//			t.Errorf("CreateTemp returned len %d: %s", len(base), base)
//		}
//	}
//}

4月24日 11:49:57 替换注释:
// OS-specific path separator

4月24日 11:49:57 替换注释:
// OS-specific path list separator

4月24日 11:49:57 替换注释:
// Args hold the command-line arguments, starting with the program name.

4月24日 11:49:57 替换注释:
// The defined file mode bits are the most significant bits of the FileMode.
// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.
// The values of these bits should be considered part of the public API and
// may be used in wire protocols or disk representations: they must not be
// changed, although new bits might be added.

4月24日 11:49:57 替换注释:
	// The single letters are the abbreviations
	// used by the String method's formatting.

4月24日 11:49:57 替换注释:
// T: temporary file; Plan 9 only

4月24日 11:49:57 替换注释:
// c: Unix character device, when ModeDevice is set

4月24日 11:49:57 替换注释:
// ?: non-regular file; nothing else is known about this file

4月24日 11:49:57 替换注释:
// Mask for the type bits. For regular files, none will be set.

4月24日 11:49:57 替换注释:
// Unix permission bits, 0o777

4月24日 11:49:57 替换注释:
// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// Package cfg holds configuration shared by the Go command and internal/testenv.
// Definitions that don't need to be exposed outside of cmd/go should be in
// cmd/go/internal/cfg instead of this package.

4月24日 11:49:57 替换注释:
// KnownEnv is a list of environment variables that affect the operation
// of the Go command.

4月24日 11:49:57 替换注释:
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// An OSArch is a pair of GOOS and GOARCH values indicating a platform.

4月24日 11:49:57 替换注释:
// RaceDetectorSupported reports whether goos/goarch supports the race
// detector. There is a copy of this function in cmd/dist/test.go.
// Race detector only supports 48-bit VMA on arm64. But it will always
// return true for arm64, because we don't have VMA size information during
// the compile time.

4月24日 11:49:57 替换注释:
// MSanSupported reports whether goos/goarch supports the memory
// sanitizer option.

4月24日 11:49:57 替换注释:
// ASanSupported reports whether goos/goarch supports the address
// sanitizer option.

4月24日 11:49:57 替换注释:
// FuzzSupported reports whether goos/goarch supports fuzzing
// ('go test -fuzz=.').

4月24日 11:49:57 替换注释:
// FuzzInstrumented reports whether fuzzing on goos/goarch uses coverage
// instrumentation. (FuzzInstrumented implies FuzzSupported.)

4月24日 11:49:57 替换注释:
// TODO(#14565): support more architectures.

4月24日 11:49:57 替换注释:
// MustLinkExternal reports whether goos/goarch requires external linking
// with or without cgo dependencies.

4月24日 11:49:57 替换注释:
			// Internally linking cgo is incomplete on some architectures.
			// https://go.dev/issue/14449

4月24日 11:49:57 替换注释:
// windows/arm64 internal linking is not implemented.

4月24日 11:49:57 替换注释:
			// Big Endian PPC64 cgo internal linking is not implemented for aix or linux.
			// https://go.dev/issue/8912

4月24日 11:49:57 替换注释:
			// It seems that on Dragonfly thread local storage is
			// set up by the dynamic linker, so internal cgo linking
			// doesn't work. Test case is "go test runtime/cgo".

4月24日 11:49:57 替换注释:
// BuildModeSupported reports whether goos/goarch supports the given build mode
// using the given compiler.
// There is a copy of this function in cmd/dist/test.go.

4月24日 11:49:57 替换注释:
				// linux/ppc64 not supported because it does
				// not support external linking mode yet.

4月24日 11:49:57 替换注释:
				// Other targets do not support -shared,
				// per ParseFlags in
				// cmd/compile/internal/base/flag.go.
				// For c-archive the Go tool passes -shared,
				// so that the result is suitable for inclusion
				// in a PIE or shared library.

4月24日 11:49:57 替换注释:
// DefaultPIE reports whether goos/goarch produces a PIE binary when using the
// "default" buildmode. On Windows this is affected by -race,
// so force the caller to pass that in to centralize that choice.

4月24日 11:49:57 替换注释:
			// PIE is not supported with -race on windows;
			// see https://go.dev/cl/416174.

4月24日 11:49:57 替换注释:
// ExecutableHasDWARF reports whether the linked executable includes DWARF
// symbols on goos/goarch.

4月24日 11:49:57 替换注释:
// osArchInfo describes information about an OSArch extracted from cmd/dist and
// stored in the generated distInfo map.

4月24日 11:49:57 替换注释:
// CgoSupported reports whether goos/goarch supports cgo.

4月24日 11:49:57 替换注释:
// Broken reportsr whether goos/goarch is considered a broken port.
// (See https://go.dev/wiki/PortingPolicy#broken-ports.)

4月24日 11:49:57 替换注释:
// Code generated by go test internal/platform -fix. DO NOT EDIT.

4月24日 11:49:57 替换注释:
// To change the information in this file, edit the cgoEnabled and/or firstClass
// maps in cmd/dist/build.go, then run 'go generate internal/platform'.

4月24日 11:49:57 替换注释:
// List is the list of all valid GOOS/GOARCH combinations,
// including known-broken ports.

4月24日 11:49:57 替换注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// A pointer to the base address of the region of pages.

4月24日 11:49:57 替换注释:
	// A pointer to the base address of a range of pages allocated by the VirtualAlloc function.
	// The page pointed to by the BaseAddress member is contained within this allocation range.

4月24日 11:49:57 替换注释:
// The memory protection option when the region was initially allocated

4月24日 11:49:57 替换注释:
// The size of the region beginning at the base address in which all pages have identical attributes, in bytes.

4月24日 11:49:57 替换注释:
// The state of the pages in the region.

4月24日 11:49:57 替换注释:
// The access protection of the pages in the region.

4月24日 11:49:57 替换注释:
// The type of pages in the region.

4月24日 11:49:57 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:57 替换注释:
// These structures are described
// in https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca069dad-ed16-42aa-b057-b6b207f447cc
// and https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/b41f1cbf-10df-4a47-98d4-1c52a833d913.

4月24日 11:49:57 替换注释:
// REPARSE_DATA_BUFFER_HEADER is a common part of REPARSE_DATA_BUFFER structure.

4月24日 11:49:57 替换注释:
	// The size, in bytes, of the reparse data that follows
	// the common portion of the REPARSE_DATA_BUFFER element.
	// This value is the length of the data starting at the
	// SubstituteNameOffset field.

4月24日 11:49:57 替换注释:
	// The integer that contains the offset, in bytes,
	// of the substitute name string in the PathBuffer array,
	// computed as an offset from byte 0 of PathBuffer. Note that
	// this offset must be divided by 2 to get the array index.

4月24日 11:49:57 替换注释:
	// The integer that contains the length, in bytes, of the
	// substitute name string. If this string is null-terminated,
	// SubstituteNameLength does not include the Unicode null character.

4月24日 11:49:57 替换注释:
// PrintNameOffset is similar to SubstituteNameOffset.

4月24日 11:49:57 替换注释:
// PrintNameLength is similar to SubstituteNameLength.

4月24日 11:49:58 替换注释:
	// Flags specifies whether the substitute name is a full path name or
	// a path name relative to the directory containing the symbolic link.

4月24日 11:49:58 替换注释:
// Path returns path stored in rb.

4月24日 11:49:58 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// AdjustTokenPrivileges call failed

4月24日 11:49:58 替换注释:
// AdjustTokenPrivileges call succeeded

4月24日 11:49:58 替换注释:
// GetLastError returned ERROR_SUCCESS

4月24日 11:49:58 替换注释:
// Implemented in runtime package.

4月24日 11:49:58 替换注释:
// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// symlink support for CreateSymbolicLink() starting with Windows 10 (1703, v10.0.14972)

4月24日 11:49:58 替换注释:
// FileInformationClass values

4月24日 11:49:58 替换注释:
// FILE_ATTRIBUTE_TAG_INFO

4月24日 11:49:58 替换注释:
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// UTF16PtrToString is like UTF16ToString, but takes *uint16
// as a parameter instead of []uint16.

4月24日 11:49:58 替换注释:
// flags for CreateToolhelp32Snapshot

4月24日 11:49:58 替换注释:
// Constants from lmshare.h

4月24日 11:49:58 替换注释:
// Code generated by 'go generate'; DO NOT EDIT.

4月24日 11:49:58 替换注释:
// Do the interface allocations only once for common
// Errno values.

4月24日 11:49:58 替换注释:
// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.

4月24日 11:49:58 替换注释:
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Package registry provides access to the Windows registry.
//
// Here is a simple example, opening a registry key and reading a string value from it.
//
//	k, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer k.Close()
//
//	s, _, err := k.GetStringValue("SystemRoot")
//	if err != nil {
//		log.Fatal(err)
//	}
//	fmt.Printf("Windows system root is %q\n", s)
//
// NOTE: This package is a copy of golang.org/x/sys/windows/registry
// with KeyInfo.ModTime removed to prevent dependency cycles.

4月24日 11:49:58 替换注释:
	// Registry key security and access rights.
	// See https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights
	// for details.

4月24日 11:49:58 替换注释:
// Key is a handle to an open Windows registry key.
// Keys can be obtained by calling OpenKey; there are
// also some predefined root keys such as CURRENT_USER.
// Keys can be used directly in the Windows API.

4月24日 11:49:58 替换注释:
	// Windows defines some predefined root keys that are always open.
	// An application can use these keys as entry points to the registry.
	// Normally these keys are used in OpenKey to open new keys,
	// but they can also be used anywhere a Key is required.

4月24日 11:49:58 替换注释:
// Close closes open key k.

4月24日 11:49:58 替换注释:
// OpenKey opens a new key with path name relative to key k.
// It accepts any open key, including CURRENT_USER and others,
// and returns the new key and an error.
// The access parameter specifies desired access rights to the
// key to be opened.

4月24日 11:49:58 替换注释:
// ReadSubKeyNames returns the names of subkeys of key k.

4月24日 11:49:58 替换注释:
	// RegEnumKeyEx must be called repeatedly and to completion.
	// During this time, this goroutine cannot migrate away from
	// its current thread. See #49320.

4月24日 11:49:58 替换注释:
	// Registry key size limit is 255 bytes and described there:
	// https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-element-size-limits

4月24日 11:49:58 替换注释:
//plus extra room for terminating zero byte

4月24日 11:49:58 替换注释:
// Double buffer size and try again.

4月24日 11:49:58 替换注释:
// CreateKey creates a key named path under open key k.
// CreateKey returns the new key and a boolean flag that reports
// whether the key already existed.
// The access parameter specifies the access rights for the key
// to be created.

4月24日 11:49:58 替换注释:
// DeleteKey deletes the subkey path of key k and its values.

4月24日 11:49:58 替换注释:
// A KeyInfo describes the statistics of a key. It is returned by Stat.

4月24日 11:49:58 替换注释:
// Stat retrieves information about the open key k.

4月24日 11:49:58 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Every PC has "stdole 2.0 OLE Automation" library installed.

4月24日 11:49:58 替换注释:
// read data with no buffer

4月24日 11:49:58 替换注释:
// read data with short buffer

4月24日 11:49:58 替换注释:
// check GetValue returns ErrNotExist as required

4月24日 11:49:58 替换注释:
				// Size of utf16 string in bytes is not perfect,
				// but correct for current test values.
				// Size also includes terminating 0.

4月24日 11:49:58 替换注释:
// count bytes, not uint16

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// ErrShortBuffer is returned when the buffer was too short for the operation.

4月24日 11:49:58 替换注释:
// ErrNotExist is returned when a registry key or value does not exist.

4月24日 11:49:58 替换注释:
// ErrUnexpectedType is returned by Get*Value when the value's type was unexpected.

4月24日 11:49:58 替换注释:
// GetValue retrieves the type and data for the specified value associated
// with an open key k. It fills up buffer buf and returns the retrieved
// byte count n. If buf is too small to fit the stored value it returns
// ErrShortBuffer error along with the required buffer size n.
// If no buffer is provided, it returns true and actual buffer size n.
// If no buffer is provided, GetValue returns the value's type only.
// If the value does not exist, the error returned is ErrNotExist.
//
// GetValue is a low level function. If value's type is known, use the appropriate
// Get*Value function instead.

4月24日 11:49:58 替换注释:
// GetStringValue retrieves the string value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetStringValue returns ErrNotExist.
// If value is not SZ or EXPAND_SZ, it will return the correct value
// type and ErrUnexpectedType.

4月24日 11:49:58 替换注释:
// GetMUIStringValue retrieves the localized string value for
// the specified value name associated with an open key k.
// If the value name doesn't exist or the localized string value
// can't be resolved, GetMUIStringValue returns ErrNotExist.

4月24日 11:49:58 替换注释:
		// Try to resolve the string value using the system directory as
		// a DLL search path; this assumes the string value is of the form
		// @[path]\dllname,-strID but with no path given, e.g. @tzres.dll,-320.

4月24日 11:49:58 替换注释:
		// This approach works with tzres.dll but may have to be revised
		// in the future to allow callers to provide custom search paths.

4月24日 11:49:58 替换注释:
// Buffer not growing, assume race; break

4月24日 11:49:58 替换注释:
// ExpandString expands environment-variable strings and replaces
// them with the values defined for the current user.
// Use ExpandString to expand EXPAND_SZ strings.

4月24日 11:49:58 替换注释:
// GetStringsValue retrieves the []string value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetStringsValue returns ErrNotExist.
// If value is not MULTI_SZ, it will return the correct value
// type and ErrUnexpectedType.

4月24日 11:49:58 替换注释:
// remove terminating null

4月24日 11:49:58 替换注释:
// GetIntegerValue retrieves the integer value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetIntegerValue returns ErrNotExist.
// If value is not DWORD or QWORD, it will return the correct value
// type and ErrUnexpectedType.

4月24日 11:49:58 替换注释:
// GetBinaryValue retrieves the binary value for the specified
// value name associated with an open key k. It also returns the value's type.
// If value does not exist, GetBinaryValue returns ErrNotExist.
// If value is not BINARY, it will return the correct value
// type and ErrUnexpectedType.

4月24日 11:49:58 替换注释:
// SetDWordValue sets the data and type of a name value
// under key k to value and DWORD.

4月24日 11:49:58 替换注释:
// SetQWordValue sets the data and type of a name value
// under key k to value and QWORD.

4月24日 11:49:58 替换注释:
// SetStringValue sets the data and type of a name value
// under key k to value and SZ. The value must not contain a zero byte.

4月24日 11:49:58 替换注释:
// SetExpandStringValue sets the data and type of a name value
// under key k to value and EXPAND_SZ. The value must not contain a zero byte.

4月24日 11:49:58 替换注释:
// SetStringsValue sets the data and type of a name value
// under key k to value and MULTI_SZ. The value strings
// must not contain a zero byte.

4月24日 11:49:58 替换注释:
// SetBinaryValue sets the data and type of a name value
// under key k to value and BINARY.

4月24日 11:49:58 替换注释:
// DeleteValue removes a named value from the key k.

4月24日 11:49:58 替换注释:
// ReadValueNames returns the value names of key k.

4月24日 11:49:58 替换注释:
// extra room for terminating null character

4月24日 11:49:58 替换注释:
// Double buffer size and try again.

4月24日 11:49:58 替换注释:
// Code generated by 'go generate'; DO NOT EDIT.

4月24日 11:49:58 替换注释:
// Do the interface allocations only once for common
// Errno values.

4月24日 11:49:58 替换注释:
// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.

4月24日 11:49:58 替换注释:
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)

4月24日 11:49:58 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Package sysdll is an internal leaf package that records and reports
// which Windows DLL names are used by Go itself. These DLLs are then
// only loaded from the System32 directory. See Issue 14959.

4月24日 11:49:58 替换注释:
// IsSystemDLL reports whether the named dll key (a base name, like
// "foo.dll") is a system DLL which should only be loaded from the
// Windows SYSTEM32 directory.
//
// Filenames are case sensitive, but that doesn't matter because
// the case registered with Add is also the same case used with
// LoadDLL later.
//
// It has no associated mutex and should only be mutated serially
// (currently: during init), and not concurrent with DLL loading.

4月24日 11:49:58 替换注释:
// Add notes that dll is a system32 DLL which should only be loaded
// from the Windows SYSTEM32 directory. It returns its argument back,
// for ease of use in generated code.

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// MustHaveExec checks that the current system can start new processes
// using os.StartProcess or (more commonly) exec.Command.
// If not, MustHaveExec calls t.Skip with an explanation.
//
// On some platforms MustHaveExec checks for exec support by re-executing the
// current executable, which must be a binary built by 'go test'.
// We intentionally do not provide a HasExec function because of the risk of
// inappropriate recursion in TestMain functions.
//
// To check for exec support outside of a test, just try to exec the command.
// If exec is not supported, testenv.SyscallIsNotSupported will return true
// for the resulting error.

4月24日 11:49:58 替换注释:
// Assume that exec always works on non-mobile platforms and Android.

4月24日 11:49:58 替换注释:
	// ios has an exec syscall but on real iOS devices it might return a
	// permission error. In an emulated environment (such as a Corellium host)
	// it might succeed, so if we need to exec we'll just have to try it and
	// find out.
	//
	// As of 2023-04-19 wasip1 and js don't have exec syscalls at all, but we
	// may as well use the same path so that this branch can be tested without
	// an ios environment.

4月24日 11:49:58 替换注释:
		// This isn't a standard 'go test' binary, so we don't know how to
		// self-exec in a way that should succeed without side effects.
		// Just forget it.

4月24日 11:49:58 替换注释:
	// We know that this is a test executable. We should be able to run it with a
	// no-op flag to check for overall exec support.

4月24日 11:49:58 替换注释:
// MustHaveExecPath checks that the current system can start the named executable
// using os.StartProcess or (more commonly) exec.Command.
// If not, MustHaveExecPath calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// CleanCmdEnv will fill cmd.Env with the environment, excluding certain
// variables that could modify the behavior of the Go tools such as
// GODEBUG and GOTRACEBACK.
//
// If the caller wants to set cmd.Dir, set it before calling this function,
// so PWD will be set correctly in the environment.

4月24日 11:49:58 替换注释:
		// Exclude GODEBUG from the environment to prevent its output
		// from breaking tests that are trying to parse other command output.

4月24日 11:49:58 替换注释:
// CommandContext is like exec.CommandContext, but:
//   - skips t if the platform does not support os/exec,
//   - sends SIGQUIT (if supported by the platform) instead of SIGKILL
//     in its Cancel function
//   - if the test has a deadline, adds a Context timeout and WaitDelay
//     for an arbitrary grace period before the test's deadline expires,
//   - fails the test if the command does not complete before the test's deadline, and
//   - sets a Cleanup function that verifies that the test did not leak a subprocess.

4月24日 11:49:58 替换注释:
// unlimited unless the test has a deadline (to allow for interactive debugging)

4月24日 11:49:58 替换注释:
			// Start with a minimum grace period, just long enough to consume the
			// output of a reasonable program after it terminates.

4月24日 11:49:58 替换注释:
			// If time allows, increase the termination grace period to 5% of the
			// test's remaining time.

4月24日 11:49:58 替换注释:
			// When we run commands that execute subprocesses, we want to reserve two
			// grace periods to clean up: one for the delay between the first
			// termination signal being sent (via the Cancel callback when the Context
			// expires) and the process being forcibly terminated (via the WaitDelay
			// field), and a second one for the delay between the process being
			// terminated and the test logging its output for debugging.
			//
			// (We want to ensure that the test process itself has enough time to
			// log the output before it is also terminated.)

4月24日 11:49:58 替换注释:
				// Either ctx doesn't have a deadline, or its deadline would expire
				// after (or too close before) the test has already timed out.
				// Add a shorter timeout so that the test will produce useful output.

4月24日 11:49:58 替换注释:
			// The command is being terminated due to ctx being canceled, but
			// apparently not due to an explicit test deadline that we added.
			// Log that information in case it is useful for diagnosing a failure,
			// but don't actually fail the test because of it.

4月24日 11:49:58 替换注释:
// Command is like exec.Command, but applies the same changes as
// testenv.CommandContext (with a default Context).

4月24日 11:49:58 替换注释:
// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// OptimizationOff reports whether optimization is disabled.

4月24日 11:49:58 替换注释:
// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// OptimizationOff reports whether optimization is disabled.

4月24日 11:49:58 替换注释:
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Package testenv provides information about what functionality
// is available in different testing environments run by the Go team.
//
// It is an internal package because these details are specific
// to the Go team's test setup (on build.golang.org) and not
// fundamental to tests in general.

4月24日 11:49:58 替换注释:
// Save the original environment during init for use in checks. A test
// binary may modify its environment before calling HasExec to change its
// behavior (such as mimicking a command-line tool), and that modified
// environment might cause environment checks to behave erratically.

4月24日 11:49:58 替换注释:
// Builder reports the name of the builder running this test
// (for example, "linux-amd64" or "windows-386-gce").
// If the test is not running on the build infrastructure,
// Builder returns the empty string.

4月24日 11:49:58 替换注释:
		// It's too much work to require every caller of the go command
		// to pass along "-gcflags="+os.Getenv("GO_GCFLAGS").
		// For now, if $GO_GCFLAGS is set, report that we simply can't
		// run go build.

4月24日 11:49:58 替换注释:
		// To run 'go build', we need to be able to exec a 'go' command.
		// We somewhat arbitrarily choose to exec 'go tool -n compile' because that
		// also confirms that cmd/go can find the compiler. (Before CL 472096,
		// we sometimes ended up with cmd/go installed in the test environment
		// without a cmd/compile it could use to actually build things.)

4月24日 11:49:58 替换注释:
			// We can assume that we always have a complete Go toolchain available.
			// However, this platform requires a C linker to build even pure Go
			// programs, including tests. Do we have one in the test environment?
			// (On Android, for example, the device running the test might not have a
			// C toolchain installed.)
			//
			// If CC is set explicitly, assume that we do. Otherwise, use 'go env CC'
			// to determine which toolchain it would use by default.

4月24日 11:49:58 替换注释:
// For now, having go run and having go build are the same.

4月24日 11:49:58 替换注释:
// HasParallelism reports whether the current system can execute multiple
// threads in parallel.
// There is a copy of this function in cmd/dist/test.go.

4月24日 11:49:58 替换注释:
// MustHaveParallelism checks that the current system can execute multiple
// threads in parallel. If not, MustHaveParallelism calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// GoToolPath reports the path to the Go tool.
// It is a convenience wrapper around GoTool.
// If the tool is unavailable GoToolPath calls t.Skip.
// If the tool should be available and isn't, GoToolPath calls t.Fatal.

4月24日 11:49:58 替换注释:
	// Add all environment variables that affect the Go command to test metadata.
	// Cached test results will be invalidate when these variables change.
	// See golang.org/issue/32285.

4月24日 11:49:58 替换注释:
			// If runtime.GOROOT() is non-empty, assume that it is valid.
			//
			// (It might not be: for example, the user may have explicitly set GOROOT
			// to the wrong directory, or explicitly set GOROOT_FINAL but not GOROOT
			// and hasn't moved the tree to GOROOT_FINAL yet. But those cases are
			// rare, and if that happens the user can fix what they broke.)

4月24日 11:49:58 替换注释:
		// runtime.GOROOT doesn't know where GOROOT is (perhaps because the test
		// binary was built with -trimpath, or perhaps because GOROOT_FINAL was set
		// without GOROOT and the tree hasn't been moved there yet).
		//
		// Since this is internal/testenv, we can cheat and assume that the caller
		// is a test of some package in a subdirectory of GOROOT/src. ('go test'
		// runs the test in the directory containing the packaged under test.) That
		// means that if we start walking up the tree, we should eventually find
		// GOROOT/src/go.mod, and we can report the parent directory of that.
		//
		// Notably, this works even if we can't run 'go env GOROOT' as a
		// subprocess.

4月24日 11:49:58 替换注释:
// dir is either "." or only a volume name.

4月24日 11:49:58 替换注释:
// Found "module std", which is the module declaration in GOROOT/src!

4月24日 11:49:58 替换注释:
// GOROOT reports the path to the directory containing the root of the Go
// project source tree. This is normally equivalent to runtime.GOROOT, but
// works even if the test binary was built with -trimpath and cannot exec
// 'go env GOROOT'.
//
// If GOROOT cannot be found, GOROOT skips t if t is non-nil,
// or panics otherwise.

4月24日 11:49:58 替换注释:
// GoTool reports the path to the Go tool.

4月24日 11:49:58 替换注释:
// HasSrc reports whether the entire source tree is available under GOROOT.

4月24日 11:49:58 替换注释:
// HasExternalNetwork reports whether the current system can use
// external (non-localhost) networks.

4月24日 11:49:58 替换注释:
// MustHaveExternalNetwork checks that the current system can use
// external (non-localhost) networks.
// If not, MustHaveExternalNetwork calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// HasCGO reports whether the current system can use cgo.

4月24日 11:49:58 替换注释:
// MustHaveCGO calls t.Skip if cgo is not available.

4月24日 11:49:58 替换注释:
// CanInternalLink reports whether the current system can link programs with
// internal linking.

4月24日 11:49:58 替换注释:
// MustInternalLink checks that the current system can link programs with internal
// linking.
// If not, MustInternalLink calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// MustHaveBuildMode reports whether the current system can build programs in
// the given build mode.
// If not, MustHaveBuildMode calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// HasSymlink reports whether the current system can use os.Symlink.

4月24日 11:49:58 替换注释:
// MustHaveSymlink reports whether the current system can use os.Symlink.
// If not, MustHaveSymlink calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// HasLink reports whether the current system can use os.Link.

4月24日 11:49:58 替换注释:
	// From Android release M (Marshmallow), hard linking files is blocked
	// and an attempt to call link() on a file will return EACCES.
	// - https://code.google.com/p/android-developer-preview/issues/detail?id=3150

4月24日 11:49:58 替换注释:
// MustHaveLink reports whether the current system can use os.Link.
// If not, MustHaveLink calls t.Skip with an explanation.

4月24日 11:49:58 替换注释:
// CPUIsSlow reports whether the CPU running the test is suspected to be slow.

4月24日 11:49:58 替换注释:
// SkipIfShortAndSlow skips t if -short is set and the CPU running the test is
// suspected to be slow.
//
// (This is useful for CPU-intensive tests that otherwise complete quickly.)

4月24日 11:49:58 替换注释:
// SkipIfOptimizationOff skips t if optimization is disabled.

4月24日 11:49:58 替换注释:
// WriteImportcfg writes an importcfg file used by the compiler or linker to
// dstPath containing entries for the file mappings in packageFiles, as well
// as for the packages transitively imported by the package(s) in pkgs.
//
// pkgs may include any package pattern that is valid to pass to 'go list',
// so it may also be a list of Go source files all in the same directory.

4月24日 11:49:58 替换注释:
// Use 'go list' to resolve any missing packages and rewrite the import map.

4月24日 11:49:58 替换注释:
// SyscallIsNotSupported reports whether err may indicate that a system call is
// not supported by the current platform or execution environment.

4月24日 11:49:58 替换注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Sigquit is the signal to send to kill a hanging subprocess.
// On Unix we send SIGQUIT, but on non-Unix we only have os.Kill.

4月24日 11:49:58 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
		// For wasip1, some runtimes forbid absolute symlinks,
		// or symlinks that escape the current working directory.
		// Perform a simple test to see whether the runtime
		// supports symlinks or not. If we get a permission
		// error, the runtime does not support symlinks.

4月24日 11:49:58 替换注释:
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:49:58 替换注释:
// Sigquit is the signal to send to kill a hanging subprocess.
// Send SIGQUIT to get a stack trace.

4月24日 11:49:58 替换注释:
			// User lacks permission: either the call requires root permission and the
			// user is not root, or the call is denied by a container security policy.

4月24日 11:49:58 替换注释:
			// Some containers return EINVAL instead of EPERM if a system call is
			// denied by security policy.

4月24日 11:49:58 替换注释:
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

4月24日 11:50:1 替换注释完毕

