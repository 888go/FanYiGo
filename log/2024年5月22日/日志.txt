5月22日 23:15:17 开始生成翻译提示

5月22日 23:15:19 AI返回:
func (b *缓冲区) 字节() []字节 {}

5月22日 23:15:20 AI返回:
func (b *缓冲区) 字符串() 字符串 {}

5月22日 23:15:20 AI返回:
func (b *缓冲区) 长度() int {}

5月22日 23:15:21 AI返回:
func (b *缓冲区) 容量() int {}

5月22日 23:15:22 AI返回:
func (b *缓冲区) 截断(n int) {}

5月22日 23:15:23 AI返回:
func (b *缓冲区) 重置() {}

5月22日 23:15:23 AI返回:
func (b *缓冲区) 扩展容量(n int) {}

5月22日 23:15:25 AI返回:
func (b *缓冲区) 写入(p []字节) (写入数 int, 错误 error) {}

5月22日 23:15:26 AI返回:
func (b *缓冲区) 写入字符串(s 字符串) (写入长度 int, 错误 error) {}

5月22日 23:15:28 AI返回:
func (b *缓冲区) 从读取(r io.阅读器) (读取字节数 int64, 错误 error) {}

5月22日 23:15:30 AI返回:
func (b *缓冲区) 写入到(w 写入器) (写入字节数 int64, 错误 error) {}

5月22日 23:15:30 AI返回:
func (b *缓冲区) 写字节(c 字节) 错误 {}

5月22日 23:15:32 AI返回:
func (b *缓冲区) 写入字符(r 字符) (写入量 int, 错误 error) {}

5月22日 23:15:33 AI返回:
func (b *缓冲区) 读取(p []字节) (读取的字节数 int, 错误 error) {}

5月22日 23:15:35 AI返回:
func (b *缓冲区) 下一个(n int) []字节 {}

5月22日 23:15:36 AI返回:
func (b *缓冲区) 读字节() (字节, 错误) {}

5月22日 23:15:37 AI返回:
func (b *缓冲区) 读取Unicode字符() (字符 rune, 大小 int, 错误 error) {}

5月22日 23:15:38 AI返回:
func (b *缓冲区) 读回Rune() error {}

5月22日 23:15:39 AI返回:
func (b *缓冲区) 读回字节() error {}

5月22日 23:15:41 AI返回:
func (b *缓冲区) 读取到分隔符(delim 字节) (行 []字节, 错误 error) {}

5月22日 23:15:43 AI返回:
func (b *缓冲区) 读取到分隔符(delim 字节) (行字符串, 错误 error) {}

5月22日 23:15:45 AI返回:
func 新建缓冲区(buf []字节) *缓冲区 {}

5月22日 23:16:5 AI返回:
func 新建缓冲区字符串(s 字符串) *缓冲区 {}

5月22日 23:16:10 AI返回:
const 最小读取字节数 = 512 //md5:e6440ccdc461dcd6

5月22日 23:16:12 AI返回:
var 太大错误 = bytes.太大错误 //md5:5fb25188c1ad1858

5月22日 23:16:13 AI返回:
type 字符缓冲区 struct {
    内部缓冲区 bytes.Buffer
}

5月22日 23:16:13 生成完毕:
E:\SVN\GO\code\gosdk\bytes\buffer.go

5月22日 23:16:14 AI返回:
func 是否相等(a, b []字节) bool {}

5月22日 23:16:15 AI返回:
func 比较Bytes(a, b []字节) int {}

5月22日 23:16:15 AI返回:
func Count(字符串 s, 分隔符 sep []byte) int {}

5月22日 23:16:17 AI返回:
func 包含(b 字节切片, 子切片字节 []byte) bool {}

5月22日 23:16:36 AI返回:
func 包含任何字符(b 字节切片, 字符串 string) bool {}

5月22日 23:16:37 AI返回:
func 包含字符(b 字节切片, r 字符) bool {}

5月22日 23:16:38 AI返回:
func 查找字节(b 字节切片, c 字节) int {}

5月22日 23:16:39 AI返回:
func 最后出现的索引(s 字符串切片, 分隔符 []byte) int {}

5月22日 23:16:40 AI返回:
func 最后一个字节索引(s []字节, b 字节) int {}

5月22日 23:16:43 AI返回:
func 找到字符(s []字节, 字符 rune) int {}

5月22日 23:16:45 AI返回:
func 查找任意字符(s 字节切片, 字符串 string) int {}

5月22日 23:16:46 AI返回:
func 最后出现任意字符(s []字节, 字符串 string) int {}

5月22日 23:16:47 AI返回:
func 分割N(s 字符串, 分隔符 []字节, 限制次数 int) [][]字节 {}

5月22日 23:16:48 AI返回:
func 分割符后N次(s 字节切片, 分隔符 []字节, n int) [][]字节 {}

5月22日 23:16:50 AI返回:
func 分割(s 字符串切片, 分隔符字节切片) [][]字节 {}

5月22日 23:16:51 AI返回:
func 分割后缀(s 字节切片, 分隔符字节切片) [][]byte {}

5月22日 23:16:52 AI返回:
func 字符串切片分割(s 字节切片) [][]字节 {}

5月22日 23:16:56 AI返回:
func 字符串分割函数(s 字节切片, 判断条件 func(rune) bool) [][]字节 {}

5月22日 23:16:58 AI返回:
func 连接(切片 [][]byte, 分隔符 []byte) []byte {}

5月22日 23:16:59 AI返回:
func 有前缀(s 字符串切片, 前缀 字符串切片) bool {}

5月22日 23:17:0 AI返回:
func 有后缀(s 字节切片, 后缀字节切片) bool {}

5月22日 23:17:2 AI返回:
func 映射函数(mapping func(字符 rune) rune, 字符串 []byte) []byte {}

5月22日 23:17:4 AI返回:
func 重复字节切片(b 字节切片, 次数 int) 字节切片 {}

5月22日 23:17:5 AI返回:
func 转为大写(s []字节) []字节 {}

5月22日 23:17:5 AI返回:
func 转为小写(s []字节) []字节 {}

5月22日 23:17:6 AI返回:
func 转标题(s 字节切片) 字节切片 {}

5月22日 23:17:8 AI返回:
func 转大写特殊(c 特殊情况Unicode, b []字节) []字节 {}

5月22日 23:17:9 AI返回:
func 转小写特殊(c unicode.特殊情况, 字符串 []byte) []byte {}

5月22日 23:17:10 AI返回:
func 根据特殊案例转标题(c 特殊情况Unicode, s 字节切片) 字节切片 {}

5月22日 23:17:11 AI返回:
func 转换为有效UTF8(s 字节切片, 替代字符字节切片) 字节切片 {}

5月22日 23:17:12 AI返回:
func 标题化(s []字节) []字节 {}

5月22日 23:17:16 AI返回:
func 去除左侧匹配字符(s []字节, 判断函数 func(字符 rune) bool) []字节 {}

5月22日 23:17:21 AI返回:
func 去除右部匹配字符(s []字节, 判断函数 func(字符 rune) bool) []字节 {}

5月22日 23:17:28 AI返回:
func 去除满足条件字符(s []字节, 判断函数 func(字符 rune) bool) []字节 {}

5月22日 23:17:29 AI返回:
func 去除前缀(s 字节切片, prefix 前缀字节切片) 字节切片 {}

5月22日 23:17:31 AI返回:
func 去除后缀(s 字节切片, 后缀字节切片) 字节切片 {}

5月22日 23:17:32 AI返回:
func 寻找功能(s []字节, 判断函数 func(r 跑位) bool) 整数 {}

5月22日 23:17:34 AI返回:
func 最后一个满足条件索引(s []字节, f func(字符) bool) int {}

5月22日 23:17:35 AI返回:
func 去除两侧字符(s 字节切片, 删除字符集 string) 字节切片 {}

5月22日 23:17:38 AI返回:
func 去除左侧字符(s []字节, 删除字符集 string) []字节 {}

// 注意：在Go语言中，"字节"通常指的是"byte"的切片，即[]byte，代表字符串的二进制表示。

5月22日 23:17:39 AI返回:
func 去除右边空白字符(s 字节切片, cutset 字符串) 字节切片 {}

5月22日 23:17:40 AI返回:
func 去除空白符(s []字节) []字节 {}

5月22日 23:17:42 AI返回:
func 字符串转Unicode字符(s []字节) []Unicode字符 {} 

5月22日 23:17:44 AI返回:
func 替换(s 字符串切片, 旧字节切片, 新字节切片 []byte, 次数 int) []byte {}

5月22日 23:17:45 AI返回:
func 替换所有(s 字符串, 旧字节切片, 新字节切片) 字符串切片 {}

5月22日 23:17:46 AI返回:
func 字符串全匹配比较(s, t []字节) bool {}

5月22日 23:17:47 AI返回:
func 查找子串(s 字符切片, 分隔符 []byte) int {}

5月22日 23:17:49 AI返回:
func 切割字符串(s 字符串切片, 分隔符 []byte) (前置部分 []byte, 后置部分 []byte, 是否找到 bool) {}

5月22日 23:17:50 AI返回:
func 克隆(b 字节切片) 字节切片 {}

5月22日 23:17:51 AI返回:
func 去除前缀(s 字节切片, 前缀字节切片) (剩余部分字节切片, 是否找到 bool) {}

5月22日 23:17:52 AI返回:
func 去除后缀(s 字节切片, 后缀字节切片) (切片前缀 []byte, 是否找到 bool) {}

5月22日 23:17:52 生成完毕:
E:\SVN\GO\code\gosdk\bytes\bytes.go

5月22日 23:18:8 AI返回:
func (r *阅读器) 长度() int {}

5月22日 23:18:9 AI返回:
func (r *读取器) 大小() int64 {}

5月22日 23:18:22 AI返回:
func (r *阅读器) 读取(b []字节) (读取数 int, 错误 error) {}

5月22日 23:18:29 AI返回:
// 从Reader中根据偏移量off读取数据到字节切片b中
// 返回已读取的字节数n和可能遇到的错误err
func (r *Reader) 读取At(b []字节, 偏移 int64) (读取数 int, 错误 error) {}

5月22日 23:18:30 AI返回:
func (r *阅读器) 读字节() (字节, 错误) {}

5月22日 23:18:33 AI返回:
func (r *阅读器) 读回一个字节() error {}

5月22日 23:18:35 AI返回:
func (r *Reader) 读取字符() (字符 ch rune, 大小 size int, 错误 err error) {}

5月22日 23:18:36 AI返回:
func (r *阅读器) 读回Rune() error {}

5月22日 23:18:39 AI返回:
func (r *阅读器) 寻找(offset int64, 从何处 int) (新位置 int64, 错误 error) {}

